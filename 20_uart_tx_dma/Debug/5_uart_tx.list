
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000410  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000410  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004df  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000174  00000000  00000000  0001091f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000058  00000000  00000000  00010b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc30  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005cd  00000000  00000000  0001e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fa9e  00000000  00000000  0001ed5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006e7fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000110  00000000  00000000  0006e84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003f0 	.word	0x080003f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003f0 	.word	0x080003f0

080001d8 <main>:
void led_blink(void);



int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	uart_tx_init();								//UART transmit initialization
 80001dc:	f000 f824 	bl	8000228 <uart_tx_init>


	while(1)
	{
		 uart2_write('Y');						//UART write function
 80001e0:	2059      	movs	r0, #89	; 0x59
 80001e2:	f000 f879 	bl	80002d8 <uart2_write>
		 led_blink();							//led blink function
 80001e6:	f000 f801 	bl	80001ec <led_blink>
		 uart2_write('Y');						//UART write function
 80001ea:	e7f9      	b.n	80001e0 <main+0x8>

080001ec <led_blink>:
	}
}

/*LED blink function which makes the on board led PA5 toggle*/
void led_blink(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (1U<<5);
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <led_blink+0x34>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <led_blink+0x34>)
 80001f8:	f083 0320 	eor.w	r3, r3, #32
 80001fc:	6153      	str	r3, [r2, #20]
	for(int i = 0; i<1000000; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <led_blink+0x1e>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a05      	ldr	r2, [pc, #20]	; (8000224 <led_blink+0x38>)
 800020e:	4293      	cmp	r3, r2
 8000210:	ddf8      	ble.n	8000204 <led_blink+0x18>
	{
	}
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	40020000 	.word	0x40020000
 8000224:	000f423f 	.word	0x000f423f

08000228 <uart_tx_init>:

/*uart tx init where all the declaration are done*/
void uart_tx_init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
/*Configure gpioa pin*/
//Configure clock access
	RCC->AHB1ENR |= GPIOAEN;
 800022c:	4b26      	ldr	r3, [pc, #152]	; (80002c8 <uart_tx_init+0xa0>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a25      	ldr	r2, [pc, #148]	; (80002c8 <uart_tx_init+0xa0>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6313      	str	r3, [r2, #48]	; 0x30

//Configure pa5 as output led PA5
	GPIOA->MODER |=(1U<<10);
 8000238:	4b24      	ldr	r3, [pc, #144]	; (80002cc <uart_tx_init+0xa4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a23      	ldr	r2, [pc, #140]	; (80002cc <uart_tx_init+0xa4>)
 800023e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000242:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000244:	4b21      	ldr	r3, [pc, #132]	; (80002cc <uart_tx_init+0xa4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a20      	ldr	r2, [pc, #128]	; (80002cc <uart_tx_init+0xa4>)
 800024a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800024e:	6013      	str	r3, [r2, #0]

//Configure alternate function for gpioa PA2
	GPIOA->MODER &=~(1U<<4);
 8000250:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <uart_tx_init+0xa4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a1d      	ldr	r2, [pc, #116]	; (80002cc <uart_tx_init+0xa4>)
 8000256:	f023 0310 	bic.w	r3, r3, #16
 800025a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800025c:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <uart_tx_init+0xa4>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <uart_tx_init+0xa4>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6013      	str	r3, [r2, #0]

//Configure alternate function to uart tx(af07)
	GPIOA->AFR[0] |= (1U<<8);
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <uart_tx_init+0xa4>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a17      	ldr	r2, [pc, #92]	; (80002cc <uart_tx_init+0xa4>)
 800026e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000272:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <uart_tx_init+0xa4>)
 8000276:	6a1b      	ldr	r3, [r3, #32]
 8000278:	4a14      	ldr	r2, [pc, #80]	; (80002cc <uart_tx_init+0xa4>)
 800027a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800027e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <uart_tx_init+0xa4>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <uart_tx_init+0xa4>)
 8000286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800028a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <uart_tx_init+0xa4>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <uart_tx_init+0xa4>)
 8000292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000296:	6213      	str	r3, [r2, #32]

//Uart clock access
	RCC->APB1ENR |= (1U<<17);
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <uart_tx_init+0xa0>)
 800029a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <uart_tx_init+0xa0>)
 800029e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a2:	6413      	str	r3, [r2, #64]	; 0x40

//Uart baudrate
	uart_set_baudrate(USART2, APB1_clk, Uart_BaudRate);
 80002a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a8:	4909      	ldr	r1, [pc, #36]	; (80002d0 <uart_tx_init+0xa8>)
 80002aa:	480a      	ldr	r0, [pc, #40]	; (80002d4 <uart_tx_init+0xac>)
 80002ac:	f000 f82c 	bl	8000308 <uart_set_baudrate>

//Uart to set tx
	USART2->CR1 = (1U<<3);
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <uart_tx_init+0xac>)
 80002b2:	2208      	movs	r2, #8
 80002b4:	60da      	str	r2, [r3, #12]

//Uart enable
	USART2->CR1 |= (1U<<13);
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <uart_tx_init+0xac>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <uart_tx_init+0xac>)
 80002bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c0:	60d3      	str	r3, [r2, #12]
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000
 80002d0:	00f42400 	.word	0x00f42400
 80002d4:	40004400 	.word	0x40004400

080002d8 <uart2_write>:

/*uart2 write which sends the value into data register*/
void uart2_write(int ch)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	//Transmit data register is empty
	while(!(USART2->SR & (1U<<7))){}
 80002e0:	bf00      	nop
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <uart2_write+0x2c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f9      	beq.n	80002e2 <uart2_write+0xa>

	//write to transmit data register
	USART2->DR = (ch & 0xFF);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <uart2_write+0x2c>)
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	6053      	str	r3, [r2, #4]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40004400 	.word	0x40004400

08000308 <uart_set_baudrate>:

/*uart set baudrate whcih gets the value from the user and sets it to BRR*/
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t Periphclk, uint32_t BaudRate)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	USARTx->BRR = uart_bd(Periphclk,BaudRate);
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	68b8      	ldr	r0, [r7, #8]
 8000318:	f000 f808 	bl	800032c <uart_bd>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	609a      	str	r2, [r3, #8]
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <uart_bd>:

/*uart bd which return the calculated periphclk and baudrate*/
static uint16_t uart_bd(uint32_t Periphclk, uint32_t BaudRate)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
	return ((Periphclk + (BaudRate/2U))/BaudRate);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	085a      	lsrs	r2, r3, #1
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	441a      	add	r2, r3
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	fbb2 f3f3 	udiv	r3, r2, r3
 8000344:	b29b      	uxth	r3, r3
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
	...

08000354 <Reset_Handler>:
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
 8000356:	4685      	mov	sp, r0
 8000358:	f3af 8000 	nop.w
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
 8000362:	2300      	movs	r3, #0
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:
 8000366:	58d4      	ldr	r4, [r2, r3]
 8000368:	50c4      	str	r4, [r0, r3]
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:
 800036c:	18c4      	adds	r4, r0, r3
 800036e:	428c      	cmp	r4, r1
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
 8000376:	2300      	movs	r3, #0
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:
 800037a:	6013      	str	r3, [r2, #0]
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:
 800037e:	42a2      	cmp	r2, r4
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>
 8000382:	f000 f811 	bl	80003a8 <__libc_init_array>
 8000386:	f7ff ff27 	bl	80001d8 <main>

0800038a <LoopForever>:
 800038a:	e7fe      	b.n	800038a <LoopForever>
 800038c:	20020000 	.word	0x20020000
 8000390:	20000000 	.word	0x20000000
 8000394:	20000000 	.word	0x20000000
 8000398:	08000410 	.word	0x08000410
 800039c:	20000000 	.word	0x20000000
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <ADC_IRQHandler>:
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	; (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	; (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	; (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
