
20_uart_tx_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000420  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080005b8  080005b8  000105b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005d8  080005d8  000105e0  2**0
                  CONTENTS
  4 .ARM          00000000  080005d8  080005d8  000105e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d8  080005e0  000105e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005e0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000dd4  00000000  00000000  00010610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c6  00000000  00000000  000113e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000117b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ec22  00000000  00000000  00011908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f79  00000000  00000000  0002052a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053ff9  00000000  00000000  000214a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007549c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000210  00000000  00000000  000754ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005a0 	.word	0x080005a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080005a0 	.word	0x080005a0

080001d8 <main>:
char key;
static void usart_callback(void);
void USART2_IRQHandler(void);

int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0

	char message[31] = "Hello from STM32 DMA transfer";
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <main+0x54>)
 80001e0:	463c      	mov	r4, r7
 80001e2:	461d      	mov	r5, r3
 80001e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001ec:	c407      	stmia	r4!, {r0, r1, r2}
 80001ee:	8023      	strh	r3, [r4, #0]
 80001f0:	2300      	movs	r3, #0
 80001f2:	77bb      	strb	r3, [r7, #30]
	RCC->AHB1ENR |= GPIOAEN;
 80001f4:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <main+0x58>)
 80001f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <main+0x58>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (1U<<10);
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <main+0x5c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <main+0x5c>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <main+0x5c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a08      	ldr	r2, [pc, #32]	; (8000234 <main+0x5c>)
 8000212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000216:	6013      	str	r3, [r2, #0]

	uart_rxtx_init();
 8000218:	f000 f904 	bl	8000424 <uart_rxtx_init>
	dma1_stream6_init((uint32_t) message, (uint32_t) &USART2->DR, 31);
 800021c:	463b      	mov	r3, r7
 800021e:	221f      	movs	r2, #31
 8000220:	4905      	ldr	r1, [pc, #20]	; (8000238 <main+0x60>)
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f84c 	bl	80002c0 <dma1_stream6_init>


	while(1)
 8000228:	e7fe      	b.n	8000228 <main+0x50>
 800022a:	bf00      	nop
 800022c:	080005b8 	.word	0x080005b8
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000
 8000238:	40004404 	.word	0x40004404

0800023c <usart_callback>:
	}

}

static void usart_callback(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= LED_pin;
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <usart_callback+0x1c>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a04      	ldr	r2, [pc, #16]	; (8000258 <usart_callback+0x1c>)
 8000246:	f083 0320 	eor.w	r3, r3, #32
 800024a:	6153      	str	r3, [r2, #20]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40020000 	.word	0x40020000

0800025c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	/*Check whether SR register is set or not*/
	if(DMA1->HISR & (1U<<21))
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <DMA1_Stream6_IRQHandler+0x24>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000268:	2b00      	cmp	r3, #0
 800026a:	d007      	beq.n	800027c <DMA1_Stream6_IRQHandler+0x20>
	{
		/*Clearing the SR register*/
		DMA1->HIFCR &=~(1U<<21);
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <DMA1_Stream6_IRQHandler+0x24>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a03      	ldr	r2, [pc, #12]	; (8000280 <DMA1_Stream6_IRQHandler+0x24>)
 8000272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000276:	60d3      	str	r3, [r2, #12]
		usart_callback();
 8000278:	f7ff ffe0 	bl	800023c <usart_callback>
	}
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40026000 	.word	0x40026000

08000284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	2b00      	cmp	r3, #0
 8000294:	db0b      	blt.n	80002ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f003 021f 	and.w	r2, r3, #31
 800029c:	4907      	ldr	r1, [pc, #28]	; (80002bc <__NVIC_EnableIRQ+0x38>)
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	095b      	lsrs	r3, r3, #5
 80002a4:	2001      	movs	r0, #1
 80002a6:	fa00 f202 	lsl.w	r2, r0, r2
 80002aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <dma1_stream6_init>:
	{
	}
}

void dma1_stream6_init(uint32_t src, uint32_t dst, uint32_t len)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
	/*Enable clock access to DMA*/
	RCC->AHB1ENR |= (1U<<21);
 80002cc:	4b3e      	ldr	r3, [pc, #248]	; (80003c8 <dma1_stream6_init+0x108>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	4a3d      	ldr	r2, [pc, #244]	; (80003c8 <dma1_stream6_init+0x108>)
 80002d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Disable DMA1 stream6*/
	DMA1_Stream6->CR &=~(1U<<0);
 80002d8:	4b3c      	ldr	r3, [pc, #240]	; (80003cc <dma1_stream6_init+0x10c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a3b      	ldr	r2, [pc, #236]	; (80003cc <dma1_stream6_init+0x10c>)
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6013      	str	r3, [r2, #0]

	/*Wait until the CR DMA1 is disabled*/
	while(DMA1_Stream6->CR & (1U<<0));
 80002e4:	bf00      	nop
 80002e6:	4b39      	ldr	r3, [pc, #228]	; (80003cc <dma1_stream6_init+0x10c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d1f9      	bne.n	80002e6 <dma1_stream6_init+0x26>

	/*Clear all interrupt*/
	DMA1->HIFCR |= (1U<<16);
 80002f2:	4b37      	ldr	r3, [pc, #220]	; (80003d0 <dma1_stream6_init+0x110>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	4a36      	ldr	r2, [pc, #216]	; (80003d0 <dma1_stream6_init+0x110>)
 80002f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002fc:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<18);
 80002fe:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <dma1_stream6_init+0x110>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	4a33      	ldr	r2, [pc, #204]	; (80003d0 <dma1_stream6_init+0x110>)
 8000304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000308:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<19);
 800030a:	4b31      	ldr	r3, [pc, #196]	; (80003d0 <dma1_stream6_init+0x110>)
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	4a30      	ldr	r2, [pc, #192]	; (80003d0 <dma1_stream6_init+0x110>)
 8000310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000314:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<20);
 8000316:	4b2e      	ldr	r3, [pc, #184]	; (80003d0 <dma1_stream6_init+0x110>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <dma1_stream6_init+0x110>)
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000320:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<21);
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <dma1_stream6_init+0x110>)
 8000324:	68db      	ldr	r3, [r3, #12]
 8000326:	4a2a      	ldr	r2, [pc, #168]	; (80003d0 <dma1_stream6_init+0x110>)
 8000328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800032c:	60d3      	str	r3, [r2, #12]

	/*Set the destination buffer*/
	DMA1_Stream6->PAR = dst;
 800032e:	4a27      	ldr	r2, [pc, #156]	; (80003cc <dma1_stream6_init+0x10c>)
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	6093      	str	r3, [r2, #8]

	/*Set the source buffer*/
	DMA1_Stream6->M0AR = src;
 8000334:	4a25      	ldr	r2, [pc, #148]	; (80003cc <dma1_stream6_init+0x10c>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	60d3      	str	r3, [r2, #12]

	/*Set the length*/
	DMA1_Stream6->NDTR = len;
 800033a:	4a24      	ldr	r2, [pc, #144]	; (80003cc <dma1_stream6_init+0x10c>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	6053      	str	r3, [r2, #4]

	/*Select stream6 channel4*/
	DMA1_Stream6->CR &=~(1U<<25);
 8000340:	4b22      	ldr	r3, [pc, #136]	; (80003cc <dma1_stream6_init+0x10c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a21      	ldr	r2, [pc, #132]	; (80003cc <dma1_stream6_init+0x10c>)
 8000346:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800034a:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &=~(1U<<26);
 800034c:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <dma1_stream6_init+0x10c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <dma1_stream6_init+0x10c>)
 8000352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000356:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= (1U<<27);
 8000358:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <dma1_stream6_init+0x10c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a1b      	ldr	r2, [pc, #108]	; (80003cc <dma1_stream6_init+0x10c>)
 800035e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000362:	6013      	str	r3, [r2, #0]

	/*Enable memory increment*/
	DMA1_Stream6->CR |= (1U<<10);
 8000364:	4b19      	ldr	r3, [pc, #100]	; (80003cc <dma1_stream6_init+0x10c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a18      	ldr	r2, [pc, #96]	; (80003cc <dma1_stream6_init+0x10c>)
 800036a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800036e:	6013      	str	r3, [r2, #0]

	/*Configure transfer direction*/
	DMA1_Stream6->CR |= (1U<<6);
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <dma1_stream6_init+0x10c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a15      	ldr	r2, [pc, #84]	; (80003cc <dma1_stream6_init+0x10c>)
 8000376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800037a:	6013      	str	r3, [r2, #0]

	/*Enable transfer complete interrupt*/
	DMA1_Stream6->CR |= (1U<<4);
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <dma1_stream6_init+0x10c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a12      	ldr	r2, [pc, #72]	; (80003cc <dma1_stream6_init+0x10c>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6013      	str	r3, [r2, #0]

	/*Enable direct mode and disable FIFO*/
	DMA1_Stream6->CR |= (1U<<1);
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <dma1_stream6_init+0x10c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <dma1_stream6_init+0x10c>)
 800038e:	f043 0302 	orr.w	r3, r3, #2
 8000392:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->FCR|= (1U<<1);
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <dma1_stream6_init+0x10c>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a0c      	ldr	r2, [pc, #48]	; (80003cc <dma1_stream6_init+0x10c>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6153      	str	r3, [r2, #20]

	/*Enable DMA1 stream6*/
	DMA1_Stream6->CR |= (1U<<0);
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <dma1_stream6_init+0x10c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a09      	ldr	r2, [pc, #36]	; (80003cc <dma1_stream6_init+0x10c>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]

	/*Enable UART2 transmitter DMA*/
	USART2->CR3 |= (1U<<7);
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <dma1_stream6_init+0x114>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <dma1_stream6_init+0x114>)
 80003b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b6:	6153      	str	r3, [r2, #20]

	/*DMA interrupt enable in NVIC*/
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80003b8:	2011      	movs	r0, #17
 80003ba:	f7ff ff63 	bl	8000284 <__NVIC_EnableIRQ>
}
 80003be:	bf00      	nop
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40023800 	.word	0x40023800
 80003cc:	400260a0 	.word	0x400260a0
 80003d0:	40026000 	.word	0x40026000
 80003d4:	40004400 	.word	0x40004400

080003d8 <uart_set_baudrate>:
	return USART2->DR;
}

/*uart set baudrate whcih gets the value from the user and sets it to BRR*/
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t Periphclk, uint32_t BaudRate)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
	USARTx->BRR = uart_bd(Periphclk,BaudRate);
 80003e4:	6879      	ldr	r1, [r7, #4]
 80003e6:	68b8      	ldr	r0, [r7, #8]
 80003e8:	f000 f808 	bl	80003fc <uart_bd>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	609a      	str	r2, [r3, #8]
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <uart_bd>:

/*uart bd which return the calculated periphclk and baudrate*/
static uint16_t uart_bd(uint32_t Periphclk, uint32_t BaudRate)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
	return ((Periphclk + (BaudRate/2U))/BaudRate);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	085a      	lsrs	r2, r3, #1
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	441a      	add	r2, r3
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	fbb2 f3f3 	udiv	r3, r2, r3
 8000414:	b29b      	uxth	r3, r3
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <uart_rxtx_init>:


/*uart tx init where all the declaration are done*/
void uart_rxtx_init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
/*Configure gpioa pin*/
//Configure clock access
	RCC->AHB1ENR |= GPIOAEN;
 8000428:	4b32      	ldr	r3, [pc, #200]	; (80004f4 <uart_rxtx_init+0xd0>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a31      	ldr	r2, [pc, #196]	; (80004f4 <uart_rxtx_init+0xd0>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6313      	str	r3, [r2, #48]	; 0x30

//Configure alternate function for gpioa PA2
	GPIOA->MODER &=~(1U<<4);
 8000434:	4b30      	ldr	r3, [pc, #192]	; (80004f8 <uart_rxtx_init+0xd4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a2f      	ldr	r2, [pc, #188]	; (80004f8 <uart_rxtx_init+0xd4>)
 800043a:	f023 0310 	bic.w	r3, r3, #16
 800043e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000440:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <uart_rxtx_init+0xd4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a2c      	ldr	r2, [pc, #176]	; (80004f8 <uart_rxtx_init+0xd4>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6013      	str	r3, [r2, #0]


//Configure alternate function to uart tx(af07)
	GPIOA->AFR[0] |= (1U<<8);
 800044c:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <uart_rxtx_init+0xd4>)
 800044e:	6a1b      	ldr	r3, [r3, #32]
 8000450:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <uart_rxtx_init+0xd4>)
 8000452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000456:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000458:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <uart_rxtx_init+0xd4>)
 800045a:	6a1b      	ldr	r3, [r3, #32]
 800045c:	4a26      	ldr	r2, [pc, #152]	; (80004f8 <uart_rxtx_init+0xd4>)
 800045e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000462:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000464:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <uart_rxtx_init+0xd4>)
 8000466:	6a1b      	ldr	r3, [r3, #32]
 8000468:	4a23      	ldr	r2, [pc, #140]	; (80004f8 <uart_rxtx_init+0xd4>)
 800046a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000470:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <uart_rxtx_init+0xd4>)
 8000472:	6a1b      	ldr	r3, [r3, #32]
 8000474:	4a20      	ldr	r2, [pc, #128]	; (80004f8 <uart_rxtx_init+0xd4>)
 8000476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800047a:	6213      	str	r3, [r2, #32]

//Configure alternate function for gpioa PA3
	GPIOA->MODER &=~(1U<<6);
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <uart_rxtx_init+0xd4>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a1d      	ldr	r2, [pc, #116]	; (80004f8 <uart_rxtx_init+0xd4>)
 8000482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000486:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <uart_rxtx_init+0xd4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a1a      	ldr	r2, [pc, #104]	; (80004f8 <uart_rxtx_init+0xd4>)
 800048e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000492:	6013      	str	r3, [r2, #0]

//Configure alternate function to uart tx(af07)
	GPIOA->AFR[0] |= (1U<<12);
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <uart_rxtx_init+0xd4>)
 8000496:	6a1b      	ldr	r3, [r3, #32]
 8000498:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <uart_rxtx_init+0xd4>)
 800049a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800049e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <uart_rxtx_init+0xd4>)
 80004a2:	6a1b      	ldr	r3, [r3, #32]
 80004a4:	4a14      	ldr	r2, [pc, #80]	; (80004f8 <uart_rxtx_init+0xd4>)
 80004a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <uart_rxtx_init+0xd4>)
 80004ae:	6a1b      	ldr	r3, [r3, #32]
 80004b0:	4a11      	ldr	r2, [pc, #68]	; (80004f8 <uart_rxtx_init+0xd4>)
 80004b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <uart_rxtx_init+0xd4>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <uart_rxtx_init+0xd4>)
 80004be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004c2:	6213      	str	r3, [r2, #32]

//Uart clock access
	RCC->APB1ENR |= UART2EN;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <uart_rxtx_init+0xd0>)
 80004c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c8:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <uart_rxtx_init+0xd0>)
 80004ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ce:	6413      	str	r3, [r2, #64]	; 0x40

//Uart baudrate
	uart_set_baudrate(USART2, APB1_clk, Uart_BaudRate);
 80004d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d4:	4909      	ldr	r1, [pc, #36]	; (80004fc <uart_rxtx_init+0xd8>)
 80004d6:	480a      	ldr	r0, [pc, #40]	; (8000500 <uart_rxtx_init+0xdc>)
 80004d8:	f7ff ff7e 	bl	80003d8 <uart_set_baudrate>

//Uart to set tx/rx
	USART2->CR1 = (CR1_TE | CR1_RE);
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <uart_rxtx_init+0xdc>)
 80004de:	220c      	movs	r2, #12
 80004e0:	60da      	str	r2, [r3, #12]



//Uart enable
	USART2->CR1 |= CR1_UE;
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <uart_rxtx_init+0xdc>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	4a06      	ldr	r2, [pc, #24]	; (8000500 <uart_rxtx_init+0xdc>)
 80004e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ec:	60d3      	str	r3, [r2, #12]
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40023800 	.word	0x40023800
 80004f8:	40020000 	.word	0x40020000
 80004fc:	00f42400 	.word	0x00f42400
 8000500:	40004400 	.word	0x40004400

08000504 <Reset_Handler>:
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <LoopForever+0x2>)
 8000506:	4685      	mov	sp, r0
 8000508:	f3af 8000 	nop.w
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <LoopForever+0x6>)
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <LoopForever+0xa>)
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <LoopForever+0xe>)
 8000512:	2300      	movs	r3, #0
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:
 8000516:	58d4      	ldr	r4, [r2, r3]
 8000518:	50c4      	str	r4, [r0, r3]
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:
 800051c:	18c4      	adds	r4, r0, r3
 800051e:	428c      	cmp	r4, r1
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LoopForever+0x12>)
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <LoopForever+0x16>)
 8000526:	2300      	movs	r3, #0
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:
 800052e:	42a2      	cmp	r2, r4
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>
 8000532:	f000 f811 	bl	8000558 <__libc_init_array>
 8000536:	f7ff fe4f 	bl	80001d8 <main>

0800053a <LoopForever>:
 800053a:	e7fe      	b.n	800053a <LoopForever>
 800053c:	20020000 	.word	0x20020000
 8000540:	20000000 	.word	0x20000000
 8000544:	20000000 	.word	0x20000000
 8000548:	080005e0 	.word	0x080005e0
 800054c:	20000000 	.word	0x20000000
 8000550:	2000001c 	.word	0x2000001c

08000554 <ADC_IRQHandler>:
 8000554:	e7fe      	b.n	8000554 <ADC_IRQHandler>
	...

08000558 <__libc_init_array>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	4d0d      	ldr	r5, [pc, #52]	; (8000590 <__libc_init_array+0x38>)
 800055c:	4c0d      	ldr	r4, [pc, #52]	; (8000594 <__libc_init_array+0x3c>)
 800055e:	1b64      	subs	r4, r4, r5
 8000560:	10a4      	asrs	r4, r4, #2
 8000562:	2600      	movs	r6, #0
 8000564:	42a6      	cmp	r6, r4
 8000566:	d109      	bne.n	800057c <__libc_init_array+0x24>
 8000568:	4d0b      	ldr	r5, [pc, #44]	; (8000598 <__libc_init_array+0x40>)
 800056a:	4c0c      	ldr	r4, [pc, #48]	; (800059c <__libc_init_array+0x44>)
 800056c:	f000 f818 	bl	80005a0 <_init>
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	10a4      	asrs	r4, r4, #2
 8000574:	2600      	movs	r6, #0
 8000576:	42a6      	cmp	r6, r4
 8000578:	d105      	bne.n	8000586 <__libc_init_array+0x2e>
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000580:	4798      	blx	r3
 8000582:	3601      	adds	r6, #1
 8000584:	e7ee      	b.n	8000564 <__libc_init_array+0xc>
 8000586:	f855 3b04 	ldr.w	r3, [r5], #4
 800058a:	4798      	blx	r3
 800058c:	3601      	adds	r6, #1
 800058e:	e7f2      	b.n	8000576 <__libc_init_array+0x1e>
 8000590:	080005d8 	.word	0x080005d8
 8000594:	080005d8 	.word	0x080005d8
 8000598:	080005d8 	.word	0x080005d8
 800059c:	080005dc 	.word	0x080005dc

080005a0 <_init>:
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a2:	bf00      	nop
 80005a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a6:	bc08      	pop	{r3}
 80005a8:	469e      	mov	lr, r3
 80005aa:	4770      	bx	lr

080005ac <_fini>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr
