
10_adc_continuous_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000146c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800160c  0800160c  0001160c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016b8  080016b8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016b8  080016b8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016b8  080016b8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016b8  080016b8  000116b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016bc  080016bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000064  08001724  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001724  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012ee  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005be  00000000  00000000  00021382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00021940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  00021ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc4c  00000000  00000000  00021c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002023  00000000  00000000  00031854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055441  00000000  00000000  00033877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00088cb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cb0  00000000  00000000  00088d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080015f4 	.word	0x080015f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080015f4 	.word	0x080015f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_int>:
#define SWSTART					(1U<<30)
#define EOC						(1U<<1)
#define ADC1_cont				(1U<<1)

void pa1_adc_int(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	/*Enable clock access to PA1*/
	RCC->AHB1ENR |= GPIOA_EN;
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <pa1_adc_int+0x58>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <pa1_adc_int+0x58>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Configure MODER as analog*/
	GPIOA->MODER |= (1U<<2);
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <pa1_adc_int+0x5c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <pa1_adc_int+0x5c>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <pa1_adc_int+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <pa1_adc_int+0x5c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	/*Enable clock access for ADC*/
	RCC->APB2ENR |= ADC1_EN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <pa1_adc_int+0x58>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ac:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <pa1_adc_int+0x58>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b2:	6453      	str	r3, [r2, #68]	; 0x44

	/*Configure adc parameters*/
	/*Conversion sequence start*/
	ADC1->SQR3 = ADC1_CH1;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <pa1_adc_int+0x60>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	635a      	str	r2, [r3, #52]	; 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC1_length;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <pa1_adc_int+0x60>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable ADC*/
	ADC1->CR2 |= ADC1_ON;
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <pa1_adc_int+0x60>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <pa1_adc_int+0x60>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40012000 	.word	0x40012000

080002e4 <start_conversion>:

void start_conversion(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC1_cont;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <start_conversion+0x28>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a07      	ldr	r2, [pc, #28]	; (800030c <start_conversion+0x28>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= SWSTART;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <start_conversion+0x28>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <start_conversion+0x28>)
 80002fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002fe:	6093      	str	r3, [r2, #8]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40012000 	.word	0x40012000

08000310 <adc_read>:

uint32_t adc_read()
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	while(!(ADC1->SR & EOC)){
 8000314:	bf00      	nop
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <adc_read+0x20>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <adc_read+0x6>
	}

	return ADC1->DR;
 8000322:	4b03      	ldr	r3, [pc, #12]	; (8000330 <adc_read+0x20>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40012000 	.word	0x40012000

08000334 <main>:
#include "uart.h"
#include "adc.h"

uint32_t sensor_value;
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0


	uart_rxtx_init();								//UART transceiver initialization
 8000338:	f000 f902 	bl	8000540 <uart_rxtx_init>
	pa1_adc_int();
 800033c:	f7ff ffa0 	bl	8000280 <pa1_adc_int>
	start_conversion();
 8000340:	f7ff ffd0 	bl	80002e4 <start_conversion>
	while(1)
	{
		sensor_value = adc_read();
 8000344:	f7ff ffe4 	bl	8000310 <adc_read>
 8000348:	4603      	mov	r3, r0
 800034a:	4a04      	ldr	r2, [pc, #16]	; (800035c <main+0x28>)
 800034c:	6013      	str	r3, [r2, #0]
		printf("Sensor value : %d",(int)sensor_value);
 800034e:	4b03      	ldr	r3, [pc, #12]	; (800035c <main+0x28>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4619      	mov	r1, r3
 8000354:	4802      	ldr	r0, [pc, #8]	; (8000360 <main+0x2c>)
 8000356:	f000 f9bf 	bl	80006d8 <iprintf>
		sensor_value = adc_read();
 800035a:	e7f3      	b.n	8000344 <main+0x10>
 800035c:	20000080 	.word	0x20000080
 8000360:	0800160c 	.word	0x0800160c

08000364 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
 8000374:	e00a      	b.n	800038c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000376:	f3af 8000 	nop.w
 800037a:	4601      	mov	r1, r0
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	1c5a      	adds	r2, r3, #1
 8000380:	60ba      	str	r2, [r7, #8]
 8000382:	b2ca      	uxtb	r2, r1
 8000384:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	3301      	adds	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	697a      	ldr	r2, [r7, #20]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	429a      	cmp	r2, r3
 8000392:	dbf0      	blt.n	8000376 <_read+0x12>
	}

return len;
 8000394:	687b      	ldr	r3, [r7, #4]
}
 8000396:	4618      	mov	r0, r3
 8000398:	3718      	adds	r7, #24
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b086      	sub	sp, #24
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	60f8      	str	r0, [r7, #12]
 80003a6:	60b9      	str	r1, [r7, #8]
 80003a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
 80003ae:	e009      	b.n	80003c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	1c5a      	adds	r2, r3, #1
 80003b4:	60ba      	str	r2, [r7, #8]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 f877 	bl	80004ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	3301      	adds	r3, #1
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	697a      	ldr	r2, [r7, #20]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	dbf1      	blt.n	80003b0 <_write+0x12>
	}
	return len;
 80003cc:	687b      	ldr	r3, [r7, #4]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3718      	adds	r7, #24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <_close>:

int _close(int file)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
	return -1;
 80003de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
 80003f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <_isatty>:

int _isatty(int file)
{
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
	return 1;
 8000416:	2301      	movs	r3, #1
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
	return 0;
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000448:	4a14      	ldr	r2, [pc, #80]	; (800049c <_sbrk+0x5c>)
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <_sbrk+0x60>)
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <_sbrk+0x64>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d102      	bne.n	8000462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <_sbrk+0x64>)
 800045e:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <_sbrk+0x68>)
 8000460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <_sbrk+0x64>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4413      	add	r3, r2
 800046a:	693a      	ldr	r2, [r7, #16]
 800046c:	429a      	cmp	r2, r3
 800046e:	d207      	bcs.n	8000480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000470:	f000 f900 	bl	8000674 <__errno>
 8000474:	4603      	mov	r3, r0
 8000476:	220c      	movs	r2, #12
 8000478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047a:	f04f 33ff 	mov.w	r3, #4294967295
 800047e:	e009      	b.n	8000494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <_sbrk+0x64>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <_sbrk+0x64>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <_sbrk+0x64>)
 8000490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000492:	68fb      	ldr	r3, [r7, #12]
}
 8000494:	4618      	mov	r0, r3
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20020000 	.word	0x20020000
 80004a0:	00000400 	.word	0x00000400
 80004a4:	20000084 	.word	0x20000084
 80004a8:	20000098 	.word	0x20000098

080004ac <__io_putchar>:
static uint16_t uart_bd(uint32_t Periphclk, uint32_t BaudRate);
void uart2_write(int ch);

/*put char function is used to return the unsigned character*/
int __io_putchar(int ch)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f000 f805 	bl	80004c4 <uart2_write>
	return ch;
 80004ba:	687b      	ldr	r3, [r7, #4]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <uart2_write>:
}


/*uart2 write which sends the value into data register*/
void uart2_write(int ch)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	//Transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 80004cc:	bf00      	nop
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <uart2_write+0x2c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f9      	beq.n	80004ce <uart2_write+0xa>

	//write to transmit data register
	USART2->DR = (ch & 0xFF);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <uart2_write+0x2c>)
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	6053      	str	r3, [r2, #4]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40004400 	.word	0x40004400

080004f4 <uart_set_baudrate>:
	return USART2->DR;
}

/*uart set baudrate whcih gets the value from the user and sets it to BRR*/
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t Periphclk, uint32_t BaudRate)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	USARTx->BRR = uart_bd(Periphclk,BaudRate);
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	68b8      	ldr	r0, [r7, #8]
 8000504:	f000 f808 	bl	8000518 <uart_bd>
 8000508:	4603      	mov	r3, r0
 800050a:	461a      	mov	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	609a      	str	r2, [r3, #8]
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <uart_bd>:

/*uart bd which return the calculated periphclk and baudrate*/
static uint16_t uart_bd(uint32_t Periphclk, uint32_t BaudRate)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	return ((Periphclk + (BaudRate/2U))/BaudRate);
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	085a      	lsrs	r2, r3, #1
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	441a      	add	r2, r3
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000530:	b29b      	uxth	r3, r3
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <uart_rxtx_init>:


/*uart tx init where all the declaration are done*/
void uart_rxtx_init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
/*Configure gpioa pin*/
//Configure clock access
	RCC->AHB1ENR |= GPIOAEN;
 8000544:	4b32      	ldr	r3, [pc, #200]	; (8000610 <uart_rxtx_init+0xd0>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a31      	ldr	r2, [pc, #196]	; (8000610 <uart_rxtx_init+0xd0>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6313      	str	r3, [r2, #48]	; 0x30

//Configure alternate function for gpioa PA2
	GPIOA->MODER &=~(1U<<4);
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <uart_rxtx_init+0xd4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a2f      	ldr	r2, [pc, #188]	; (8000614 <uart_rxtx_init+0xd4>)
 8000556:	f023 0310 	bic.w	r3, r3, #16
 800055a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800055c:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <uart_rxtx_init+0xd4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a2c      	ldr	r2, [pc, #176]	; (8000614 <uart_rxtx_init+0xd4>)
 8000562:	f043 0320 	orr.w	r3, r3, #32
 8000566:	6013      	str	r3, [r2, #0]


//Configure alternate function to uart tx(af07)
	GPIOA->AFR[0] |= (1U<<8);
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <uart_rxtx_init+0xd4>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a29      	ldr	r2, [pc, #164]	; (8000614 <uart_rxtx_init+0xd4>)
 800056e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000572:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <uart_rxtx_init+0xd4>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	4a26      	ldr	r2, [pc, #152]	; (8000614 <uart_rxtx_init+0xd4>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <uart_rxtx_init+0xd4>)
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	4a23      	ldr	r2, [pc, #140]	; (8000614 <uart_rxtx_init+0xd4>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <uart_rxtx_init+0xd4>)
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	4a20      	ldr	r2, [pc, #128]	; (8000614 <uart_rxtx_init+0xd4>)
 8000592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000596:	6213      	str	r3, [r2, #32]

//Configure alternate function for gpioa PA3
	GPIOA->MODER &=~(1U<<6);
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <uart_rxtx_init+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <uart_rxtx_init+0xd4>)
 800059e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <uart_rxtx_init+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <uart_rxtx_init+0xd4>)
 80005aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ae:	6013      	str	r3, [r2, #0]

//Configure alternate function to uart tx(af07)
	GPIOA->AFR[0] |= (1U<<12);
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <uart_rxtx_init+0xd4>)
 80005b2:	6a1b      	ldr	r3, [r3, #32]
 80005b4:	4a17      	ldr	r2, [pc, #92]	; (8000614 <uart_rxtx_init+0xd4>)
 80005b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <uart_rxtx_init+0xd4>)
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <uart_rxtx_init+0xd4>)
 80005c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <uart_rxtx_init+0xd4>)
 80005ca:	6a1b      	ldr	r3, [r3, #32]
 80005cc:	4a11      	ldr	r2, [pc, #68]	; (8000614 <uart_rxtx_init+0xd4>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <uart_rxtx_init+0xd4>)
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <uart_rxtx_init+0xd4>)
 80005da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005de:	6213      	str	r3, [r2, #32]

//Uart clock access
	RCC->APB1ENR |= UART2EN;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <uart_rxtx_init+0xd0>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <uart_rxtx_init+0xd0>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40

//Uart baudrate
	uart_set_baudrate(USART2, APB1_clk, Uart_BaudRate);
 80005ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f0:	4909      	ldr	r1, [pc, #36]	; (8000618 <uart_rxtx_init+0xd8>)
 80005f2:	480a      	ldr	r0, [pc, #40]	; (800061c <uart_rxtx_init+0xdc>)
 80005f4:	f7ff ff7e 	bl	80004f4 <uart_set_baudrate>

//Uart to set tx/rx
	USART2->CR1 = (CR1_TE | CR1_RE);
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <uart_rxtx_init+0xdc>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	60da      	str	r2, [r3, #12]



//Uart enable
	USART2->CR1 |= CR1_UE;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <uart_rxtx_init+0xdc>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <uart_rxtx_init+0xdc>)
 8000604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000608:	60d3      	str	r3, [r2, #12]
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40020000 	.word	0x40020000
 8000618:	00f42400 	.word	0x00f42400
 800061c:	40004400 	.word	0x40004400

08000620 <Reset_Handler>:
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <LoopForever+0x2>)
 8000622:	4685      	mov	sp, r0
 8000624:	f3af 8000 	nop.w
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <LoopForever+0x6>)
 800062a:	490d      	ldr	r1, [pc, #52]	; (8000660 <LoopForever+0xa>)
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <LoopForever+0xe>)
 800062e:	2300      	movs	r3, #0
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:
 8000632:	58d4      	ldr	r4, [r2, r3]
 8000634:	50c4      	str	r4, [r0, r3]
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:
 8000638:	18c4      	adds	r4, r0, r3
 800063a:	428c      	cmp	r4, r1
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <LoopForever+0x12>)
 8000640:	4c0a      	ldr	r4, [pc, #40]	; (800066c <LoopForever+0x16>)
 8000642:	2300      	movs	r3, #0
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:
 800064a:	42a2      	cmp	r2, r4
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>
 800064e:	f000 f817 	bl	8000680 <__libc_init_array>
 8000652:	f7ff fe6f 	bl	8000334 <main>

08000656 <LoopForever>:
 8000656:	e7fe      	b.n	8000656 <LoopForever>
 8000658:	20020000 	.word	0x20020000
 800065c:	20000000 	.word	0x20000000
 8000660:	20000064 	.word	0x20000064
 8000664:	080016c0 	.word	0x080016c0
 8000668:	20000064 	.word	0x20000064
 800066c:	20000098 	.word	0x20000098

08000670 <ADC_IRQHandler>:
 8000670:	e7fe      	b.n	8000670 <ADC_IRQHandler>
	...

08000674 <__errno>:
 8000674:	4b01      	ldr	r3, [pc, #4]	; (800067c <__errno+0x8>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000

08000680 <__libc_init_array>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4d0d      	ldr	r5, [pc, #52]	; (80006b8 <__libc_init_array+0x38>)
 8000684:	4c0d      	ldr	r4, [pc, #52]	; (80006bc <__libc_init_array+0x3c>)
 8000686:	1b64      	subs	r4, r4, r5
 8000688:	10a4      	asrs	r4, r4, #2
 800068a:	2600      	movs	r6, #0
 800068c:	42a6      	cmp	r6, r4
 800068e:	d109      	bne.n	80006a4 <__libc_init_array+0x24>
 8000690:	4d0b      	ldr	r5, [pc, #44]	; (80006c0 <__libc_init_array+0x40>)
 8000692:	4c0c      	ldr	r4, [pc, #48]	; (80006c4 <__libc_init_array+0x44>)
 8000694:	f000 ffae 	bl	80015f4 <_init>
 8000698:	1b64      	subs	r4, r4, r5
 800069a:	10a4      	asrs	r4, r4, #2
 800069c:	2600      	movs	r6, #0
 800069e:	42a6      	cmp	r6, r4
 80006a0:	d105      	bne.n	80006ae <__libc_init_array+0x2e>
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a8:	4798      	blx	r3
 80006aa:	3601      	adds	r6, #1
 80006ac:	e7ee      	b.n	800068c <__libc_init_array+0xc>
 80006ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b2:	4798      	blx	r3
 80006b4:	3601      	adds	r6, #1
 80006b6:	e7f2      	b.n	800069e <__libc_init_array+0x1e>
 80006b8:	080016b8 	.word	0x080016b8
 80006bc:	080016b8 	.word	0x080016b8
 80006c0:	080016b8 	.word	0x080016b8
 80006c4:	080016bc 	.word	0x080016bc

080006c8 <memset>:
 80006c8:	4402      	add	r2, r0
 80006ca:	4603      	mov	r3, r0
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d100      	bne.n	80006d2 <memset+0xa>
 80006d0:	4770      	bx	lr
 80006d2:	f803 1b01 	strb.w	r1, [r3], #1
 80006d6:	e7f9      	b.n	80006cc <memset+0x4>

080006d8 <iprintf>:
 80006d8:	b40f      	push	{r0, r1, r2, r3}
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <iprintf+0x2c>)
 80006dc:	b513      	push	{r0, r1, r4, lr}
 80006de:	681c      	ldr	r4, [r3, #0]
 80006e0:	b124      	cbz	r4, 80006ec <iprintf+0x14>
 80006e2:	69a3      	ldr	r3, [r4, #24]
 80006e4:	b913      	cbnz	r3, 80006ec <iprintf+0x14>
 80006e6:	4620      	mov	r0, r4
 80006e8:	f000 f866 	bl	80007b8 <__sinit>
 80006ec:	ab05      	add	r3, sp, #20
 80006ee:	9a04      	ldr	r2, [sp, #16]
 80006f0:	68a1      	ldr	r1, [r4, #8]
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	4620      	mov	r0, r4
 80006f6:	f000 f9bd 	bl	8000a74 <_vfiprintf_r>
 80006fa:	b002      	add	sp, #8
 80006fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000700:	b004      	add	sp, #16
 8000702:	4770      	bx	lr
 8000704:	20000000 	.word	0x20000000

08000708 <std>:
 8000708:	2300      	movs	r3, #0
 800070a:	b510      	push	{r4, lr}
 800070c:	4604      	mov	r4, r0
 800070e:	e9c0 3300 	strd	r3, r3, [r0]
 8000712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000716:	6083      	str	r3, [r0, #8]
 8000718:	8181      	strh	r1, [r0, #12]
 800071a:	6643      	str	r3, [r0, #100]	; 0x64
 800071c:	81c2      	strh	r2, [r0, #14]
 800071e:	6183      	str	r3, [r0, #24]
 8000720:	4619      	mov	r1, r3
 8000722:	2208      	movs	r2, #8
 8000724:	305c      	adds	r0, #92	; 0x5c
 8000726:	f7ff ffcf 	bl	80006c8 <memset>
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <std+0x38>)
 800072c:	6263      	str	r3, [r4, #36]	; 0x24
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <std+0x3c>)
 8000730:	62a3      	str	r3, [r4, #40]	; 0x28
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <std+0x40>)
 8000734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <std+0x44>)
 8000738:	6224      	str	r4, [r4, #32]
 800073a:	6323      	str	r3, [r4, #48]	; 0x30
 800073c:	bd10      	pop	{r4, pc}
 800073e:	bf00      	nop
 8000740:	0800101d 	.word	0x0800101d
 8000744:	0800103f 	.word	0x0800103f
 8000748:	08001077 	.word	0x08001077
 800074c:	0800109b 	.word	0x0800109b

08000750 <_cleanup_r>:
 8000750:	4901      	ldr	r1, [pc, #4]	; (8000758 <_cleanup_r+0x8>)
 8000752:	f000 b8af 	b.w	80008b4 <_fwalk_reent>
 8000756:	bf00      	nop
 8000758:	08001375 	.word	0x08001375

0800075c <__sfmoreglue>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	2268      	movs	r2, #104	; 0x68
 8000760:	1e4d      	subs	r5, r1, #1
 8000762:	4355      	muls	r5, r2
 8000764:	460e      	mov	r6, r1
 8000766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800076a:	f000 f8e5 	bl	8000938 <_malloc_r>
 800076e:	4604      	mov	r4, r0
 8000770:	b140      	cbz	r0, 8000784 <__sfmoreglue+0x28>
 8000772:	2100      	movs	r1, #0
 8000774:	e9c0 1600 	strd	r1, r6, [r0]
 8000778:	300c      	adds	r0, #12
 800077a:	60a0      	str	r0, [r4, #8]
 800077c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000780:	f7ff ffa2 	bl	80006c8 <memset>
 8000784:	4620      	mov	r0, r4
 8000786:	bd70      	pop	{r4, r5, r6, pc}

08000788 <__sfp_lock_acquire>:
 8000788:	4801      	ldr	r0, [pc, #4]	; (8000790 <__sfp_lock_acquire+0x8>)
 800078a:	f000 b8b3 	b.w	80008f4 <__retarget_lock_acquire_recursive>
 800078e:	bf00      	nop
 8000790:	20000089 	.word	0x20000089

08000794 <__sfp_lock_release>:
 8000794:	4801      	ldr	r0, [pc, #4]	; (800079c <__sfp_lock_release+0x8>)
 8000796:	f000 b8ae 	b.w	80008f6 <__retarget_lock_release_recursive>
 800079a:	bf00      	nop
 800079c:	20000089 	.word	0x20000089

080007a0 <__sinit_lock_acquire>:
 80007a0:	4801      	ldr	r0, [pc, #4]	; (80007a8 <__sinit_lock_acquire+0x8>)
 80007a2:	f000 b8a7 	b.w	80008f4 <__retarget_lock_acquire_recursive>
 80007a6:	bf00      	nop
 80007a8:	2000008a 	.word	0x2000008a

080007ac <__sinit_lock_release>:
 80007ac:	4801      	ldr	r0, [pc, #4]	; (80007b4 <__sinit_lock_release+0x8>)
 80007ae:	f000 b8a2 	b.w	80008f6 <__retarget_lock_release_recursive>
 80007b2:	bf00      	nop
 80007b4:	2000008a 	.word	0x2000008a

080007b8 <__sinit>:
 80007b8:	b510      	push	{r4, lr}
 80007ba:	4604      	mov	r4, r0
 80007bc:	f7ff fff0 	bl	80007a0 <__sinit_lock_acquire>
 80007c0:	69a3      	ldr	r3, [r4, #24]
 80007c2:	b11b      	cbz	r3, 80007cc <__sinit+0x14>
 80007c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c8:	f7ff bff0 	b.w	80007ac <__sinit_lock_release>
 80007cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80007d0:	6523      	str	r3, [r4, #80]	; 0x50
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <__sinit+0x68>)
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <__sinit+0x6c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80007da:	42a3      	cmp	r3, r4
 80007dc:	bf04      	itt	eq
 80007de:	2301      	moveq	r3, #1
 80007e0:	61a3      	streq	r3, [r4, #24]
 80007e2:	4620      	mov	r0, r4
 80007e4:	f000 f820 	bl	8000828 <__sfp>
 80007e8:	6060      	str	r0, [r4, #4]
 80007ea:	4620      	mov	r0, r4
 80007ec:	f000 f81c 	bl	8000828 <__sfp>
 80007f0:	60a0      	str	r0, [r4, #8]
 80007f2:	4620      	mov	r0, r4
 80007f4:	f000 f818 	bl	8000828 <__sfp>
 80007f8:	2200      	movs	r2, #0
 80007fa:	60e0      	str	r0, [r4, #12]
 80007fc:	2104      	movs	r1, #4
 80007fe:	6860      	ldr	r0, [r4, #4]
 8000800:	f7ff ff82 	bl	8000708 <std>
 8000804:	68a0      	ldr	r0, [r4, #8]
 8000806:	2201      	movs	r2, #1
 8000808:	2109      	movs	r1, #9
 800080a:	f7ff ff7d 	bl	8000708 <std>
 800080e:	68e0      	ldr	r0, [r4, #12]
 8000810:	2202      	movs	r2, #2
 8000812:	2112      	movs	r1, #18
 8000814:	f7ff ff78 	bl	8000708 <std>
 8000818:	2301      	movs	r3, #1
 800081a:	61a3      	str	r3, [r4, #24]
 800081c:	e7d2      	b.n	80007c4 <__sinit+0xc>
 800081e:	bf00      	nop
 8000820:	08001620 	.word	0x08001620
 8000824:	08000751 	.word	0x08000751

08000828 <__sfp>:
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082a:	4607      	mov	r7, r0
 800082c:	f7ff ffac 	bl	8000788 <__sfp_lock_acquire>
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <__sfp+0x84>)
 8000832:	681e      	ldr	r6, [r3, #0]
 8000834:	69b3      	ldr	r3, [r6, #24]
 8000836:	b913      	cbnz	r3, 800083e <__sfp+0x16>
 8000838:	4630      	mov	r0, r6
 800083a:	f7ff ffbd 	bl	80007b8 <__sinit>
 800083e:	3648      	adds	r6, #72	; 0x48
 8000840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000844:	3b01      	subs	r3, #1
 8000846:	d503      	bpl.n	8000850 <__sfp+0x28>
 8000848:	6833      	ldr	r3, [r6, #0]
 800084a:	b30b      	cbz	r3, 8000890 <__sfp+0x68>
 800084c:	6836      	ldr	r6, [r6, #0]
 800084e:	e7f7      	b.n	8000840 <__sfp+0x18>
 8000850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000854:	b9d5      	cbnz	r5, 800088c <__sfp+0x64>
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <__sfp+0x88>)
 8000858:	60e3      	str	r3, [r4, #12]
 800085a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800085e:	6665      	str	r5, [r4, #100]	; 0x64
 8000860:	f000 f847 	bl	80008f2 <__retarget_lock_init_recursive>
 8000864:	f7ff ff96 	bl	8000794 <__sfp_lock_release>
 8000868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800086c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000870:	6025      	str	r5, [r4, #0]
 8000872:	61a5      	str	r5, [r4, #24]
 8000874:	2208      	movs	r2, #8
 8000876:	4629      	mov	r1, r5
 8000878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800087c:	f7ff ff24 	bl	80006c8 <memset>
 8000880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000888:	4620      	mov	r0, r4
 800088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800088c:	3468      	adds	r4, #104	; 0x68
 800088e:	e7d9      	b.n	8000844 <__sfp+0x1c>
 8000890:	2104      	movs	r1, #4
 8000892:	4638      	mov	r0, r7
 8000894:	f7ff ff62 	bl	800075c <__sfmoreglue>
 8000898:	4604      	mov	r4, r0
 800089a:	6030      	str	r0, [r6, #0]
 800089c:	2800      	cmp	r0, #0
 800089e:	d1d5      	bne.n	800084c <__sfp+0x24>
 80008a0:	f7ff ff78 	bl	8000794 <__sfp_lock_release>
 80008a4:	230c      	movs	r3, #12
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	e7ee      	b.n	8000888 <__sfp+0x60>
 80008aa:	bf00      	nop
 80008ac:	08001620 	.word	0x08001620
 80008b0:	ffff0001 	.word	0xffff0001

080008b4 <_fwalk_reent>:
 80008b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008b8:	4606      	mov	r6, r0
 80008ba:	4688      	mov	r8, r1
 80008bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80008c0:	2700      	movs	r7, #0
 80008c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008c6:	f1b9 0901 	subs.w	r9, r9, #1
 80008ca:	d505      	bpl.n	80008d8 <_fwalk_reent+0x24>
 80008cc:	6824      	ldr	r4, [r4, #0]
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d1f7      	bne.n	80008c2 <_fwalk_reent+0xe>
 80008d2:	4638      	mov	r0, r7
 80008d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008d8:	89ab      	ldrh	r3, [r5, #12]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d907      	bls.n	80008ee <_fwalk_reent+0x3a>
 80008de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008e2:	3301      	adds	r3, #1
 80008e4:	d003      	beq.n	80008ee <_fwalk_reent+0x3a>
 80008e6:	4629      	mov	r1, r5
 80008e8:	4630      	mov	r0, r6
 80008ea:	47c0      	blx	r8
 80008ec:	4307      	orrs	r7, r0
 80008ee:	3568      	adds	r5, #104	; 0x68
 80008f0:	e7e9      	b.n	80008c6 <_fwalk_reent+0x12>

080008f2 <__retarget_lock_init_recursive>:
 80008f2:	4770      	bx	lr

080008f4 <__retarget_lock_acquire_recursive>:
 80008f4:	4770      	bx	lr

080008f6 <__retarget_lock_release_recursive>:
 80008f6:	4770      	bx	lr

080008f8 <sbrk_aligned>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4e0e      	ldr	r6, [pc, #56]	; (8000934 <sbrk_aligned+0x3c>)
 80008fc:	460c      	mov	r4, r1
 80008fe:	6831      	ldr	r1, [r6, #0]
 8000900:	4605      	mov	r5, r0
 8000902:	b911      	cbnz	r1, 800090a <sbrk_aligned+0x12>
 8000904:	f000 fb7a 	bl	8000ffc <_sbrk_r>
 8000908:	6030      	str	r0, [r6, #0]
 800090a:	4621      	mov	r1, r4
 800090c:	4628      	mov	r0, r5
 800090e:	f000 fb75 	bl	8000ffc <_sbrk_r>
 8000912:	1c43      	adds	r3, r0, #1
 8000914:	d00a      	beq.n	800092c <sbrk_aligned+0x34>
 8000916:	1cc4      	adds	r4, r0, #3
 8000918:	f024 0403 	bic.w	r4, r4, #3
 800091c:	42a0      	cmp	r0, r4
 800091e:	d007      	beq.n	8000930 <sbrk_aligned+0x38>
 8000920:	1a21      	subs	r1, r4, r0
 8000922:	4628      	mov	r0, r5
 8000924:	f000 fb6a 	bl	8000ffc <_sbrk_r>
 8000928:	3001      	adds	r0, #1
 800092a:	d101      	bne.n	8000930 <sbrk_aligned+0x38>
 800092c:	f04f 34ff 	mov.w	r4, #4294967295
 8000930:	4620      	mov	r0, r4
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	20000090 	.word	0x20000090

08000938 <_malloc_r>:
 8000938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800093c:	1ccd      	adds	r5, r1, #3
 800093e:	f025 0503 	bic.w	r5, r5, #3
 8000942:	3508      	adds	r5, #8
 8000944:	2d0c      	cmp	r5, #12
 8000946:	bf38      	it	cc
 8000948:	250c      	movcc	r5, #12
 800094a:	2d00      	cmp	r5, #0
 800094c:	4607      	mov	r7, r0
 800094e:	db01      	blt.n	8000954 <_malloc_r+0x1c>
 8000950:	42a9      	cmp	r1, r5
 8000952:	d905      	bls.n	8000960 <_malloc_r+0x28>
 8000954:	230c      	movs	r3, #12
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	2600      	movs	r6, #0
 800095a:	4630      	mov	r0, r6
 800095c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000960:	4e2e      	ldr	r6, [pc, #184]	; (8000a1c <_malloc_r+0xe4>)
 8000962:	f000 fdbb 	bl	80014dc <__malloc_lock>
 8000966:	6833      	ldr	r3, [r6, #0]
 8000968:	461c      	mov	r4, r3
 800096a:	bb34      	cbnz	r4, 80009ba <_malloc_r+0x82>
 800096c:	4629      	mov	r1, r5
 800096e:	4638      	mov	r0, r7
 8000970:	f7ff ffc2 	bl	80008f8 <sbrk_aligned>
 8000974:	1c43      	adds	r3, r0, #1
 8000976:	4604      	mov	r4, r0
 8000978:	d14d      	bne.n	8000a16 <_malloc_r+0xde>
 800097a:	6834      	ldr	r4, [r6, #0]
 800097c:	4626      	mov	r6, r4
 800097e:	2e00      	cmp	r6, #0
 8000980:	d140      	bne.n	8000a04 <_malloc_r+0xcc>
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	4631      	mov	r1, r6
 8000986:	4638      	mov	r0, r7
 8000988:	eb04 0803 	add.w	r8, r4, r3
 800098c:	f000 fb36 	bl	8000ffc <_sbrk_r>
 8000990:	4580      	cmp	r8, r0
 8000992:	d13a      	bne.n	8000a0a <_malloc_r+0xd2>
 8000994:	6821      	ldr	r1, [r4, #0]
 8000996:	3503      	adds	r5, #3
 8000998:	1a6d      	subs	r5, r5, r1
 800099a:	f025 0503 	bic.w	r5, r5, #3
 800099e:	3508      	adds	r5, #8
 80009a0:	2d0c      	cmp	r5, #12
 80009a2:	bf38      	it	cc
 80009a4:	250c      	movcc	r5, #12
 80009a6:	4629      	mov	r1, r5
 80009a8:	4638      	mov	r0, r7
 80009aa:	f7ff ffa5 	bl	80008f8 <sbrk_aligned>
 80009ae:	3001      	adds	r0, #1
 80009b0:	d02b      	beq.n	8000a0a <_malloc_r+0xd2>
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	442b      	add	r3, r5
 80009b6:	6023      	str	r3, [r4, #0]
 80009b8:	e00e      	b.n	80009d8 <_malloc_r+0xa0>
 80009ba:	6822      	ldr	r2, [r4, #0]
 80009bc:	1b52      	subs	r2, r2, r5
 80009be:	d41e      	bmi.n	80009fe <_malloc_r+0xc6>
 80009c0:	2a0b      	cmp	r2, #11
 80009c2:	d916      	bls.n	80009f2 <_malloc_r+0xba>
 80009c4:	1961      	adds	r1, r4, r5
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	6025      	str	r5, [r4, #0]
 80009ca:	bf18      	it	ne
 80009cc:	6059      	strne	r1, [r3, #4]
 80009ce:	6863      	ldr	r3, [r4, #4]
 80009d0:	bf08      	it	eq
 80009d2:	6031      	streq	r1, [r6, #0]
 80009d4:	5162      	str	r2, [r4, r5]
 80009d6:	604b      	str	r3, [r1, #4]
 80009d8:	4638      	mov	r0, r7
 80009da:	f104 060b 	add.w	r6, r4, #11
 80009de:	f000 fd83 	bl	80014e8 <__malloc_unlock>
 80009e2:	f026 0607 	bic.w	r6, r6, #7
 80009e6:	1d23      	adds	r3, r4, #4
 80009e8:	1af2      	subs	r2, r6, r3
 80009ea:	d0b6      	beq.n	800095a <_malloc_r+0x22>
 80009ec:	1b9b      	subs	r3, r3, r6
 80009ee:	50a3      	str	r3, [r4, r2]
 80009f0:	e7b3      	b.n	800095a <_malloc_r+0x22>
 80009f2:	6862      	ldr	r2, [r4, #4]
 80009f4:	42a3      	cmp	r3, r4
 80009f6:	bf0c      	ite	eq
 80009f8:	6032      	streq	r2, [r6, #0]
 80009fa:	605a      	strne	r2, [r3, #4]
 80009fc:	e7ec      	b.n	80009d8 <_malloc_r+0xa0>
 80009fe:	4623      	mov	r3, r4
 8000a00:	6864      	ldr	r4, [r4, #4]
 8000a02:	e7b2      	b.n	800096a <_malloc_r+0x32>
 8000a04:	4634      	mov	r4, r6
 8000a06:	6876      	ldr	r6, [r6, #4]
 8000a08:	e7b9      	b.n	800097e <_malloc_r+0x46>
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4638      	mov	r0, r7
 8000a10:	f000 fd6a 	bl	80014e8 <__malloc_unlock>
 8000a14:	e7a1      	b.n	800095a <_malloc_r+0x22>
 8000a16:	6025      	str	r5, [r4, #0]
 8000a18:	e7de      	b.n	80009d8 <_malloc_r+0xa0>
 8000a1a:	bf00      	nop
 8000a1c:	2000008c 	.word	0x2000008c

08000a20 <__sfputc_r>:
 8000a20:	6893      	ldr	r3, [r2, #8]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	b410      	push	{r4}
 8000a28:	6093      	str	r3, [r2, #8]
 8000a2a:	da08      	bge.n	8000a3e <__sfputc_r+0x1e>
 8000a2c:	6994      	ldr	r4, [r2, #24]
 8000a2e:	42a3      	cmp	r3, r4
 8000a30:	db01      	blt.n	8000a36 <__sfputc_r+0x16>
 8000a32:	290a      	cmp	r1, #10
 8000a34:	d103      	bne.n	8000a3e <__sfputc_r+0x1e>
 8000a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a3a:	f000 bb33 	b.w	80010a4 <__swbuf_r>
 8000a3e:	6813      	ldr	r3, [r2, #0]
 8000a40:	1c58      	adds	r0, r3, #1
 8000a42:	6010      	str	r0, [r2, #0]
 8000a44:	7019      	strb	r1, [r3, #0]
 8000a46:	4608      	mov	r0, r1
 8000a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <__sfputs_r>:
 8000a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a50:	4606      	mov	r6, r0
 8000a52:	460f      	mov	r7, r1
 8000a54:	4614      	mov	r4, r2
 8000a56:	18d5      	adds	r5, r2, r3
 8000a58:	42ac      	cmp	r4, r5
 8000a5a:	d101      	bne.n	8000a60 <__sfputs_r+0x12>
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	e007      	b.n	8000a70 <__sfputs_r+0x22>
 8000a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a64:	463a      	mov	r2, r7
 8000a66:	4630      	mov	r0, r6
 8000a68:	f7ff ffda 	bl	8000a20 <__sfputc_r>
 8000a6c:	1c43      	adds	r3, r0, #1
 8000a6e:	d1f3      	bne.n	8000a58 <__sfputs_r+0xa>
 8000a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a74 <_vfiprintf_r>:
 8000a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a78:	460d      	mov	r5, r1
 8000a7a:	b09d      	sub	sp, #116	; 0x74
 8000a7c:	4614      	mov	r4, r2
 8000a7e:	4698      	mov	r8, r3
 8000a80:	4606      	mov	r6, r0
 8000a82:	b118      	cbz	r0, 8000a8c <_vfiprintf_r+0x18>
 8000a84:	6983      	ldr	r3, [r0, #24]
 8000a86:	b90b      	cbnz	r3, 8000a8c <_vfiprintf_r+0x18>
 8000a88:	f7ff fe96 	bl	80007b8 <__sinit>
 8000a8c:	4b89      	ldr	r3, [pc, #548]	; (8000cb4 <_vfiprintf_r+0x240>)
 8000a8e:	429d      	cmp	r5, r3
 8000a90:	d11b      	bne.n	8000aca <_vfiprintf_r+0x56>
 8000a92:	6875      	ldr	r5, [r6, #4]
 8000a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a96:	07d9      	lsls	r1, r3, #31
 8000a98:	d405      	bmi.n	8000aa6 <_vfiprintf_r+0x32>
 8000a9a:	89ab      	ldrh	r3, [r5, #12]
 8000a9c:	059a      	lsls	r2, r3, #22
 8000a9e:	d402      	bmi.n	8000aa6 <_vfiprintf_r+0x32>
 8000aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000aa2:	f7ff ff27 	bl	80008f4 <__retarget_lock_acquire_recursive>
 8000aa6:	89ab      	ldrh	r3, [r5, #12]
 8000aa8:	071b      	lsls	r3, r3, #28
 8000aaa:	d501      	bpl.n	8000ab0 <_vfiprintf_r+0x3c>
 8000aac:	692b      	ldr	r3, [r5, #16]
 8000aae:	b9eb      	cbnz	r3, 8000aec <_vfiprintf_r+0x78>
 8000ab0:	4629      	mov	r1, r5
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	f000 fb5a 	bl	800116c <__swsetup_r>
 8000ab8:	b1c0      	cbz	r0, 8000aec <_vfiprintf_r+0x78>
 8000aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000abc:	07dc      	lsls	r4, r3, #31
 8000abe:	d50e      	bpl.n	8000ade <_vfiprintf_r+0x6a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	b01d      	add	sp, #116	; 0x74
 8000ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aca:	4b7b      	ldr	r3, [pc, #492]	; (8000cb8 <_vfiprintf_r+0x244>)
 8000acc:	429d      	cmp	r5, r3
 8000ace:	d101      	bne.n	8000ad4 <_vfiprintf_r+0x60>
 8000ad0:	68b5      	ldr	r5, [r6, #8]
 8000ad2:	e7df      	b.n	8000a94 <_vfiprintf_r+0x20>
 8000ad4:	4b79      	ldr	r3, [pc, #484]	; (8000cbc <_vfiprintf_r+0x248>)
 8000ad6:	429d      	cmp	r5, r3
 8000ad8:	bf08      	it	eq
 8000ada:	68f5      	ldreq	r5, [r6, #12]
 8000adc:	e7da      	b.n	8000a94 <_vfiprintf_r+0x20>
 8000ade:	89ab      	ldrh	r3, [r5, #12]
 8000ae0:	0598      	lsls	r0, r3, #22
 8000ae2:	d4ed      	bmi.n	8000ac0 <_vfiprintf_r+0x4c>
 8000ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ae6:	f7ff ff06 	bl	80008f6 <__retarget_lock_release_recursive>
 8000aea:	e7e9      	b.n	8000ac0 <_vfiprintf_r+0x4c>
 8000aec:	2300      	movs	r3, #0
 8000aee:	9309      	str	r3, [sp, #36]	; 0x24
 8000af0:	2320      	movs	r3, #32
 8000af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000afa:	2330      	movs	r3, #48	; 0x30
 8000afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000cc0 <_vfiprintf_r+0x24c>
 8000b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b04:	f04f 0901 	mov.w	r9, #1
 8000b08:	4623      	mov	r3, r4
 8000b0a:	469a      	mov	sl, r3
 8000b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b10:	b10a      	cbz	r2, 8000b16 <_vfiprintf_r+0xa2>
 8000b12:	2a25      	cmp	r2, #37	; 0x25
 8000b14:	d1f9      	bne.n	8000b0a <_vfiprintf_r+0x96>
 8000b16:	ebba 0b04 	subs.w	fp, sl, r4
 8000b1a:	d00b      	beq.n	8000b34 <_vfiprintf_r+0xc0>
 8000b1c:	465b      	mov	r3, fp
 8000b1e:	4622      	mov	r2, r4
 8000b20:	4629      	mov	r1, r5
 8000b22:	4630      	mov	r0, r6
 8000b24:	f7ff ff93 	bl	8000a4e <__sfputs_r>
 8000b28:	3001      	adds	r0, #1
 8000b2a:	f000 80aa 	beq.w	8000c82 <_vfiprintf_r+0x20e>
 8000b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b30:	445a      	add	r2, fp
 8000b32:	9209      	str	r2, [sp, #36]	; 0x24
 8000b34:	f89a 3000 	ldrb.w	r3, [sl]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f000 80a2 	beq.w	8000c82 <_vfiprintf_r+0x20e>
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b48:	f10a 0a01 	add.w	sl, sl, #1
 8000b4c:	9304      	str	r3, [sp, #16]
 8000b4e:	9307      	str	r3, [sp, #28]
 8000b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b54:	931a      	str	r3, [sp, #104]	; 0x68
 8000b56:	4654      	mov	r4, sl
 8000b58:	2205      	movs	r2, #5
 8000b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b5e:	4858      	ldr	r0, [pc, #352]	; (8000cc0 <_vfiprintf_r+0x24c>)
 8000b60:	f7ff fb3e 	bl	80001e0 <memchr>
 8000b64:	9a04      	ldr	r2, [sp, #16]
 8000b66:	b9d8      	cbnz	r0, 8000ba0 <_vfiprintf_r+0x12c>
 8000b68:	06d1      	lsls	r1, r2, #27
 8000b6a:	bf44      	itt	mi
 8000b6c:	2320      	movmi	r3, #32
 8000b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b72:	0713      	lsls	r3, r2, #28
 8000b74:	bf44      	itt	mi
 8000b76:	232b      	movmi	r3, #43	; 0x2b
 8000b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b80:	2b2a      	cmp	r3, #42	; 0x2a
 8000b82:	d015      	beq.n	8000bb0 <_vfiprintf_r+0x13c>
 8000b84:	9a07      	ldr	r2, [sp, #28]
 8000b86:	4654      	mov	r4, sl
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f04f 0c0a 	mov.w	ip, #10
 8000b8e:	4621      	mov	r1, r4
 8000b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b94:	3b30      	subs	r3, #48	; 0x30
 8000b96:	2b09      	cmp	r3, #9
 8000b98:	d94e      	bls.n	8000c38 <_vfiprintf_r+0x1c4>
 8000b9a:	b1b0      	cbz	r0, 8000bca <_vfiprintf_r+0x156>
 8000b9c:	9207      	str	r2, [sp, #28]
 8000b9e:	e014      	b.n	8000bca <_vfiprintf_r+0x156>
 8000ba0:	eba0 0308 	sub.w	r3, r0, r8
 8000ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	9304      	str	r3, [sp, #16]
 8000bac:	46a2      	mov	sl, r4
 8000bae:	e7d2      	b.n	8000b56 <_vfiprintf_r+0xe2>
 8000bb0:	9b03      	ldr	r3, [sp, #12]
 8000bb2:	1d19      	adds	r1, r3, #4
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	9103      	str	r1, [sp, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	bfbb      	ittet	lt
 8000bbc:	425b      	neglt	r3, r3
 8000bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8000bc2:	9307      	strge	r3, [sp, #28]
 8000bc4:	9307      	strlt	r3, [sp, #28]
 8000bc6:	bfb8      	it	lt
 8000bc8:	9204      	strlt	r2, [sp, #16]
 8000bca:	7823      	ldrb	r3, [r4, #0]
 8000bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8000bce:	d10c      	bne.n	8000bea <_vfiprintf_r+0x176>
 8000bd0:	7863      	ldrb	r3, [r4, #1]
 8000bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8000bd4:	d135      	bne.n	8000c42 <_vfiprintf_r+0x1ce>
 8000bd6:	9b03      	ldr	r3, [sp, #12]
 8000bd8:	1d1a      	adds	r2, r3, #4
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	9203      	str	r2, [sp, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bfb8      	it	lt
 8000be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000be6:	3402      	adds	r4, #2
 8000be8:	9305      	str	r3, [sp, #20]
 8000bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000cd0 <_vfiprintf_r+0x25c>
 8000bee:	7821      	ldrb	r1, [r4, #0]
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	4650      	mov	r0, sl
 8000bf4:	f7ff faf4 	bl	80001e0 <memchr>
 8000bf8:	b140      	cbz	r0, 8000c0c <_vfiprintf_r+0x198>
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	eba0 000a 	sub.w	r0, r0, sl
 8000c00:	fa03 f000 	lsl.w	r0, r3, r0
 8000c04:	9b04      	ldr	r3, [sp, #16]
 8000c06:	4303      	orrs	r3, r0
 8000c08:	3401      	adds	r4, #1
 8000c0a:	9304      	str	r3, [sp, #16]
 8000c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c10:	482c      	ldr	r0, [pc, #176]	; (8000cc4 <_vfiprintf_r+0x250>)
 8000c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c16:	2206      	movs	r2, #6
 8000c18:	f7ff fae2 	bl	80001e0 <memchr>
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d03f      	beq.n	8000ca0 <_vfiprintf_r+0x22c>
 8000c20:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <_vfiprintf_r+0x254>)
 8000c22:	bb1b      	cbnz	r3, 8000c6c <_vfiprintf_r+0x1f8>
 8000c24:	9b03      	ldr	r3, [sp, #12]
 8000c26:	3307      	adds	r3, #7
 8000c28:	f023 0307 	bic.w	r3, r3, #7
 8000c2c:	3308      	adds	r3, #8
 8000c2e:	9303      	str	r3, [sp, #12]
 8000c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c32:	443b      	add	r3, r7
 8000c34:	9309      	str	r3, [sp, #36]	; 0x24
 8000c36:	e767      	b.n	8000b08 <_vfiprintf_r+0x94>
 8000c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c3c:	460c      	mov	r4, r1
 8000c3e:	2001      	movs	r0, #1
 8000c40:	e7a5      	b.n	8000b8e <_vfiprintf_r+0x11a>
 8000c42:	2300      	movs	r3, #0
 8000c44:	3401      	adds	r4, #1
 8000c46:	9305      	str	r3, [sp, #20]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f04f 0c0a 	mov.w	ip, #10
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c54:	3a30      	subs	r2, #48	; 0x30
 8000c56:	2a09      	cmp	r2, #9
 8000c58:	d903      	bls.n	8000c62 <_vfiprintf_r+0x1ee>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0c5      	beq.n	8000bea <_vfiprintf_r+0x176>
 8000c5e:	9105      	str	r1, [sp, #20]
 8000c60:	e7c3      	b.n	8000bea <_vfiprintf_r+0x176>
 8000c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c66:	4604      	mov	r4, r0
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e7f0      	b.n	8000c4e <_vfiprintf_r+0x1da>
 8000c6c:	ab03      	add	r3, sp, #12
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	462a      	mov	r2, r5
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <_vfiprintf_r+0x258>)
 8000c74:	a904      	add	r1, sp, #16
 8000c76:	4630      	mov	r0, r6
 8000c78:	f3af 8000 	nop.w
 8000c7c:	4607      	mov	r7, r0
 8000c7e:	1c78      	adds	r0, r7, #1
 8000c80:	d1d6      	bne.n	8000c30 <_vfiprintf_r+0x1bc>
 8000c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c84:	07d9      	lsls	r1, r3, #31
 8000c86:	d405      	bmi.n	8000c94 <_vfiprintf_r+0x220>
 8000c88:	89ab      	ldrh	r3, [r5, #12]
 8000c8a:	059a      	lsls	r2, r3, #22
 8000c8c:	d402      	bmi.n	8000c94 <_vfiprintf_r+0x220>
 8000c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c90:	f7ff fe31 	bl	80008f6 <__retarget_lock_release_recursive>
 8000c94:	89ab      	ldrh	r3, [r5, #12]
 8000c96:	065b      	lsls	r3, r3, #25
 8000c98:	f53f af12 	bmi.w	8000ac0 <_vfiprintf_r+0x4c>
 8000c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c9e:	e711      	b.n	8000ac4 <_vfiprintf_r+0x50>
 8000ca0:	ab03      	add	r3, sp, #12
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	462a      	mov	r2, r5
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <_vfiprintf_r+0x258>)
 8000ca8:	a904      	add	r1, sp, #16
 8000caa:	4630      	mov	r0, r6
 8000cac:	f000 f880 	bl	8000db0 <_printf_i>
 8000cb0:	e7e4      	b.n	8000c7c <_vfiprintf_r+0x208>
 8000cb2:	bf00      	nop
 8000cb4:	08001644 	.word	0x08001644
 8000cb8:	08001664 	.word	0x08001664
 8000cbc:	08001624 	.word	0x08001624
 8000cc0:	08001684 	.word	0x08001684
 8000cc4:	0800168e 	.word	0x0800168e
 8000cc8:	00000000 	.word	0x00000000
 8000ccc:	08000a4f 	.word	0x08000a4f
 8000cd0:	0800168a 	.word	0x0800168a

08000cd4 <_printf_common>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	4616      	mov	r6, r2
 8000cda:	4699      	mov	r9, r3
 8000cdc:	688a      	ldr	r2, [r1, #8]
 8000cde:	690b      	ldr	r3, [r1, #16]
 8000ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	bfb8      	it	lt
 8000ce8:	4613      	movlt	r3, r2
 8000cea:	6033      	str	r3, [r6, #0]
 8000cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cf0:	4607      	mov	r7, r0
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	b10a      	cbz	r2, 8000cfa <_printf_common+0x26>
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	6033      	str	r3, [r6, #0]
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	0699      	lsls	r1, r3, #26
 8000cfe:	bf42      	ittt	mi
 8000d00:	6833      	ldrmi	r3, [r6, #0]
 8000d02:	3302      	addmi	r3, #2
 8000d04:	6033      	strmi	r3, [r6, #0]
 8000d06:	6825      	ldr	r5, [r4, #0]
 8000d08:	f015 0506 	ands.w	r5, r5, #6
 8000d0c:	d106      	bne.n	8000d1c <_printf_common+0x48>
 8000d0e:	f104 0a19 	add.w	sl, r4, #25
 8000d12:	68e3      	ldr	r3, [r4, #12]
 8000d14:	6832      	ldr	r2, [r6, #0]
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	dc26      	bgt.n	8000d6a <_printf_common+0x96>
 8000d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d20:	1e13      	subs	r3, r2, #0
 8000d22:	6822      	ldr	r2, [r4, #0]
 8000d24:	bf18      	it	ne
 8000d26:	2301      	movne	r3, #1
 8000d28:	0692      	lsls	r2, r2, #26
 8000d2a:	d42b      	bmi.n	8000d84 <_printf_common+0xb0>
 8000d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d30:	4649      	mov	r1, r9
 8000d32:	4638      	mov	r0, r7
 8000d34:	47c0      	blx	r8
 8000d36:	3001      	adds	r0, #1
 8000d38:	d01e      	beq.n	8000d78 <_printf_common+0xa4>
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	68e5      	ldr	r5, [r4, #12]
 8000d3e:	6832      	ldr	r2, [r6, #0]
 8000d40:	f003 0306 	and.w	r3, r3, #6
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	bf08      	it	eq
 8000d48:	1aad      	subeq	r5, r5, r2
 8000d4a:	68a3      	ldr	r3, [r4, #8]
 8000d4c:	6922      	ldr	r2, [r4, #16]
 8000d4e:	bf0c      	ite	eq
 8000d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d54:	2500      	movne	r5, #0
 8000d56:	4293      	cmp	r3, r2
 8000d58:	bfc4      	itt	gt
 8000d5a:	1a9b      	subgt	r3, r3, r2
 8000d5c:	18ed      	addgt	r5, r5, r3
 8000d5e:	2600      	movs	r6, #0
 8000d60:	341a      	adds	r4, #26
 8000d62:	42b5      	cmp	r5, r6
 8000d64:	d11a      	bne.n	8000d9c <_printf_common+0xc8>
 8000d66:	2000      	movs	r0, #0
 8000d68:	e008      	b.n	8000d7c <_printf_common+0xa8>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	4652      	mov	r2, sl
 8000d6e:	4649      	mov	r1, r9
 8000d70:	4638      	mov	r0, r7
 8000d72:	47c0      	blx	r8
 8000d74:	3001      	adds	r0, #1
 8000d76:	d103      	bne.n	8000d80 <_printf_common+0xac>
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	3501      	adds	r5, #1
 8000d82:	e7c6      	b.n	8000d12 <_printf_common+0x3e>
 8000d84:	18e1      	adds	r1, r4, r3
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	2030      	movs	r0, #48	; 0x30
 8000d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d8e:	4422      	add	r2, r4
 8000d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d98:	3302      	adds	r3, #2
 8000d9a:	e7c7      	b.n	8000d2c <_printf_common+0x58>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	4622      	mov	r2, r4
 8000da0:	4649      	mov	r1, r9
 8000da2:	4638      	mov	r0, r7
 8000da4:	47c0      	blx	r8
 8000da6:	3001      	adds	r0, #1
 8000da8:	d0e6      	beq.n	8000d78 <_printf_common+0xa4>
 8000daa:	3601      	adds	r6, #1
 8000dac:	e7d9      	b.n	8000d62 <_printf_common+0x8e>
	...

08000db0 <_printf_i>:
 8000db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	7e0f      	ldrb	r7, [r1, #24]
 8000db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000db8:	2f78      	cmp	r7, #120	; 0x78
 8000dba:	4691      	mov	r9, r2
 8000dbc:	4680      	mov	r8, r0
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000dc6:	d807      	bhi.n	8000dd8 <_printf_i+0x28>
 8000dc8:	2f62      	cmp	r7, #98	; 0x62
 8000dca:	d80a      	bhi.n	8000de2 <_printf_i+0x32>
 8000dcc:	2f00      	cmp	r7, #0
 8000dce:	f000 80d8 	beq.w	8000f82 <_printf_i+0x1d2>
 8000dd2:	2f58      	cmp	r7, #88	; 0x58
 8000dd4:	f000 80a3 	beq.w	8000f1e <_printf_i+0x16e>
 8000dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000de0:	e03a      	b.n	8000e58 <_printf_i+0xa8>
 8000de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000de6:	2b15      	cmp	r3, #21
 8000de8:	d8f6      	bhi.n	8000dd8 <_printf_i+0x28>
 8000dea:	a101      	add	r1, pc, #4	; (adr r1, 8000df0 <_printf_i+0x40>)
 8000dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000df0:	08000e49 	.word	0x08000e49
 8000df4:	08000e5d 	.word	0x08000e5d
 8000df8:	08000dd9 	.word	0x08000dd9
 8000dfc:	08000dd9 	.word	0x08000dd9
 8000e00:	08000dd9 	.word	0x08000dd9
 8000e04:	08000dd9 	.word	0x08000dd9
 8000e08:	08000e5d 	.word	0x08000e5d
 8000e0c:	08000dd9 	.word	0x08000dd9
 8000e10:	08000dd9 	.word	0x08000dd9
 8000e14:	08000dd9 	.word	0x08000dd9
 8000e18:	08000dd9 	.word	0x08000dd9
 8000e1c:	08000f69 	.word	0x08000f69
 8000e20:	08000e8d 	.word	0x08000e8d
 8000e24:	08000f4b 	.word	0x08000f4b
 8000e28:	08000dd9 	.word	0x08000dd9
 8000e2c:	08000dd9 	.word	0x08000dd9
 8000e30:	08000f8b 	.word	0x08000f8b
 8000e34:	08000dd9 	.word	0x08000dd9
 8000e38:	08000e8d 	.word	0x08000e8d
 8000e3c:	08000dd9 	.word	0x08000dd9
 8000e40:	08000dd9 	.word	0x08000dd9
 8000e44:	08000f53 	.word	0x08000f53
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	1d1a      	adds	r2, r3, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	602a      	str	r2, [r5, #0]
 8000e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e0a3      	b.n	8000fa4 <_printf_i+0x1f4>
 8000e5c:	6820      	ldr	r0, [r4, #0]
 8000e5e:	6829      	ldr	r1, [r5, #0]
 8000e60:	0606      	lsls	r6, r0, #24
 8000e62:	f101 0304 	add.w	r3, r1, #4
 8000e66:	d50a      	bpl.n	8000e7e <_printf_i+0xce>
 8000e68:	680e      	ldr	r6, [r1, #0]
 8000e6a:	602b      	str	r3, [r5, #0]
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	da03      	bge.n	8000e78 <_printf_i+0xc8>
 8000e70:	232d      	movs	r3, #45	; 0x2d
 8000e72:	4276      	negs	r6, r6
 8000e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e78:	485e      	ldr	r0, [pc, #376]	; (8000ff4 <_printf_i+0x244>)
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	e019      	b.n	8000eb2 <_printf_i+0x102>
 8000e7e:	680e      	ldr	r6, [r1, #0]
 8000e80:	602b      	str	r3, [r5, #0]
 8000e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e86:	bf18      	it	ne
 8000e88:	b236      	sxthne	r6, r6
 8000e8a:	e7ef      	b.n	8000e6c <_printf_i+0xbc>
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	6820      	ldr	r0, [r4, #0]
 8000e90:	1d19      	adds	r1, r3, #4
 8000e92:	6029      	str	r1, [r5, #0]
 8000e94:	0601      	lsls	r1, r0, #24
 8000e96:	d501      	bpl.n	8000e9c <_printf_i+0xec>
 8000e98:	681e      	ldr	r6, [r3, #0]
 8000e9a:	e002      	b.n	8000ea2 <_printf_i+0xf2>
 8000e9c:	0646      	lsls	r6, r0, #25
 8000e9e:	d5fb      	bpl.n	8000e98 <_printf_i+0xe8>
 8000ea0:	881e      	ldrh	r6, [r3, #0]
 8000ea2:	4854      	ldr	r0, [pc, #336]	; (8000ff4 <_printf_i+0x244>)
 8000ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2308      	moveq	r3, #8
 8000eaa:	230a      	movne	r3, #10
 8000eac:	2100      	movs	r1, #0
 8000eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000eb2:	6865      	ldr	r5, [r4, #4]
 8000eb4:	60a5      	str	r5, [r4, #8]
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	bfa2      	ittt	ge
 8000eba:	6821      	ldrge	r1, [r4, #0]
 8000ebc:	f021 0104 	bicge.w	r1, r1, #4
 8000ec0:	6021      	strge	r1, [r4, #0]
 8000ec2:	b90e      	cbnz	r6, 8000ec8 <_printf_i+0x118>
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d04d      	beq.n	8000f64 <_printf_i+0x1b4>
 8000ec8:	4615      	mov	r5, r2
 8000eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ece:	fb03 6711 	mls	r7, r3, r1, r6
 8000ed2:	5dc7      	ldrb	r7, [r0, r7]
 8000ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000ed8:	4637      	mov	r7, r6
 8000eda:	42bb      	cmp	r3, r7
 8000edc:	460e      	mov	r6, r1
 8000ede:	d9f4      	bls.n	8000eca <_printf_i+0x11a>
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d10b      	bne.n	8000efc <_printf_i+0x14c>
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	07de      	lsls	r6, r3, #31
 8000ee8:	d508      	bpl.n	8000efc <_printf_i+0x14c>
 8000eea:	6923      	ldr	r3, [r4, #16]
 8000eec:	6861      	ldr	r1, [r4, #4]
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	bfde      	ittt	le
 8000ef2:	2330      	movle	r3, #48	; 0x30
 8000ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000efc:	1b52      	subs	r2, r2, r5
 8000efe:	6122      	str	r2, [r4, #16]
 8000f00:	f8cd a000 	str.w	sl, [sp]
 8000f04:	464b      	mov	r3, r9
 8000f06:	aa03      	add	r2, sp, #12
 8000f08:	4621      	mov	r1, r4
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	f7ff fee2 	bl	8000cd4 <_printf_common>
 8000f10:	3001      	adds	r0, #1
 8000f12:	d14c      	bne.n	8000fae <_printf_i+0x1fe>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	b004      	add	sp, #16
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	4835      	ldr	r0, [pc, #212]	; (8000ff4 <_printf_i+0x244>)
 8000f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f24:	6829      	ldr	r1, [r5, #0]
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f2c:	6029      	str	r1, [r5, #0]
 8000f2e:	061d      	lsls	r5, r3, #24
 8000f30:	d514      	bpl.n	8000f5c <_printf_i+0x1ac>
 8000f32:	07df      	lsls	r7, r3, #31
 8000f34:	bf44      	itt	mi
 8000f36:	f043 0320 	orrmi.w	r3, r3, #32
 8000f3a:	6023      	strmi	r3, [r4, #0]
 8000f3c:	b91e      	cbnz	r6, 8000f46 <_printf_i+0x196>
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	f023 0320 	bic.w	r3, r3, #32
 8000f44:	6023      	str	r3, [r4, #0]
 8000f46:	2310      	movs	r3, #16
 8000f48:	e7b0      	b.n	8000eac <_printf_i+0xfc>
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	2378      	movs	r3, #120	; 0x78
 8000f54:	4828      	ldr	r0, [pc, #160]	; (8000ff8 <_printf_i+0x248>)
 8000f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f5a:	e7e3      	b.n	8000f24 <_printf_i+0x174>
 8000f5c:	0659      	lsls	r1, r3, #25
 8000f5e:	bf48      	it	mi
 8000f60:	b2b6      	uxthmi	r6, r6
 8000f62:	e7e6      	b.n	8000f32 <_printf_i+0x182>
 8000f64:	4615      	mov	r5, r2
 8000f66:	e7bb      	b.n	8000ee0 <_printf_i+0x130>
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	6826      	ldr	r6, [r4, #0]
 8000f6c:	6961      	ldr	r1, [r4, #20]
 8000f6e:	1d18      	adds	r0, r3, #4
 8000f70:	6028      	str	r0, [r5, #0]
 8000f72:	0635      	lsls	r5, r6, #24
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	d501      	bpl.n	8000f7c <_printf_i+0x1cc>
 8000f78:	6019      	str	r1, [r3, #0]
 8000f7a:	e002      	b.n	8000f82 <_printf_i+0x1d2>
 8000f7c:	0670      	lsls	r0, r6, #25
 8000f7e:	d5fb      	bpl.n	8000f78 <_printf_i+0x1c8>
 8000f80:	8019      	strh	r1, [r3, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	6123      	str	r3, [r4, #16]
 8000f86:	4615      	mov	r5, r2
 8000f88:	e7ba      	b.n	8000f00 <_printf_i+0x150>
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	1d1a      	adds	r2, r3, #4
 8000f8e:	602a      	str	r2, [r5, #0]
 8000f90:	681d      	ldr	r5, [r3, #0]
 8000f92:	6862      	ldr	r2, [r4, #4]
 8000f94:	2100      	movs	r1, #0
 8000f96:	4628      	mov	r0, r5
 8000f98:	f7ff f922 	bl	80001e0 <memchr>
 8000f9c:	b108      	cbz	r0, 8000fa2 <_printf_i+0x1f2>
 8000f9e:	1b40      	subs	r0, r0, r5
 8000fa0:	6060      	str	r0, [r4, #4]
 8000fa2:	6863      	ldr	r3, [r4, #4]
 8000fa4:	6123      	str	r3, [r4, #16]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fac:	e7a8      	b.n	8000f00 <_printf_i+0x150>
 8000fae:	6923      	ldr	r3, [r4, #16]
 8000fb0:	462a      	mov	r2, r5
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	47d0      	blx	sl
 8000fb8:	3001      	adds	r0, #1
 8000fba:	d0ab      	beq.n	8000f14 <_printf_i+0x164>
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	079b      	lsls	r3, r3, #30
 8000fc0:	d413      	bmi.n	8000fea <_printf_i+0x23a>
 8000fc2:	68e0      	ldr	r0, [r4, #12]
 8000fc4:	9b03      	ldr	r3, [sp, #12]
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	bfb8      	it	lt
 8000fca:	4618      	movlt	r0, r3
 8000fcc:	e7a4      	b.n	8000f18 <_printf_i+0x168>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4632      	mov	r2, r6
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	47d0      	blx	sl
 8000fd8:	3001      	adds	r0, #1
 8000fda:	d09b      	beq.n	8000f14 <_printf_i+0x164>
 8000fdc:	3501      	adds	r5, #1
 8000fde:	68e3      	ldr	r3, [r4, #12]
 8000fe0:	9903      	ldr	r1, [sp, #12]
 8000fe2:	1a5b      	subs	r3, r3, r1
 8000fe4:	42ab      	cmp	r3, r5
 8000fe6:	dcf2      	bgt.n	8000fce <_printf_i+0x21e>
 8000fe8:	e7eb      	b.n	8000fc2 <_printf_i+0x212>
 8000fea:	2500      	movs	r5, #0
 8000fec:	f104 0619 	add.w	r6, r4, #25
 8000ff0:	e7f5      	b.n	8000fde <_printf_i+0x22e>
 8000ff2:	bf00      	nop
 8000ff4:	08001695 	.word	0x08001695
 8000ff8:	080016a6 	.word	0x080016a6

08000ffc <_sbrk_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4d06      	ldr	r5, [pc, #24]	; (8001018 <_sbrk_r+0x1c>)
 8001000:	2300      	movs	r3, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	f7ff fa1a 	bl	8000440 <_sbrk>
 800100c:	1c43      	adds	r3, r0, #1
 800100e:	d102      	bne.n	8001016 <_sbrk_r+0x1a>
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	b103      	cbz	r3, 8001016 <_sbrk_r+0x1a>
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	20000094 	.word	0x20000094

0800101c <__sread>:
 800101c:	b510      	push	{r4, lr}
 800101e:	460c      	mov	r4, r1
 8001020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001024:	f000 fab2 	bl	800158c <_read_r>
 8001028:	2800      	cmp	r0, #0
 800102a:	bfab      	itete	ge
 800102c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800102e:	89a3      	ldrhlt	r3, [r4, #12]
 8001030:	181b      	addge	r3, r3, r0
 8001032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001036:	bfac      	ite	ge
 8001038:	6563      	strge	r3, [r4, #84]	; 0x54
 800103a:	81a3      	strhlt	r3, [r4, #12]
 800103c:	bd10      	pop	{r4, pc}

0800103e <__swrite>:
 800103e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001042:	461f      	mov	r7, r3
 8001044:	898b      	ldrh	r3, [r1, #12]
 8001046:	05db      	lsls	r3, r3, #23
 8001048:	4605      	mov	r5, r0
 800104a:	460c      	mov	r4, r1
 800104c:	4616      	mov	r6, r2
 800104e:	d505      	bpl.n	800105c <__swrite+0x1e>
 8001050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001054:	2302      	movs	r3, #2
 8001056:	2200      	movs	r2, #0
 8001058:	f000 f9c8 	bl	80013ec <_lseek_r>
 800105c:	89a3      	ldrh	r3, [r4, #12]
 800105e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001066:	81a3      	strh	r3, [r4, #12]
 8001068:	4632      	mov	r2, r6
 800106a:	463b      	mov	r3, r7
 800106c:	4628      	mov	r0, r5
 800106e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001072:	f000 b869 	b.w	8001148 <_write_r>

08001076 <__sseek>:
 8001076:	b510      	push	{r4, lr}
 8001078:	460c      	mov	r4, r1
 800107a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800107e:	f000 f9b5 	bl	80013ec <_lseek_r>
 8001082:	1c43      	adds	r3, r0, #1
 8001084:	89a3      	ldrh	r3, [r4, #12]
 8001086:	bf15      	itete	ne
 8001088:	6560      	strne	r0, [r4, #84]	; 0x54
 800108a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800108e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001092:	81a3      	strheq	r3, [r4, #12]
 8001094:	bf18      	it	ne
 8001096:	81a3      	strhne	r3, [r4, #12]
 8001098:	bd10      	pop	{r4, pc}

0800109a <__sclose>:
 800109a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800109e:	f000 b8d3 	b.w	8001248 <_close_r>
	...

080010a4 <__swbuf_r>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	460e      	mov	r6, r1
 80010a8:	4614      	mov	r4, r2
 80010aa:	4605      	mov	r5, r0
 80010ac:	b118      	cbz	r0, 80010b6 <__swbuf_r+0x12>
 80010ae:	6983      	ldr	r3, [r0, #24]
 80010b0:	b90b      	cbnz	r3, 80010b6 <__swbuf_r+0x12>
 80010b2:	f7ff fb81 	bl	80007b8 <__sinit>
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <__swbuf_r+0x98>)
 80010b8:	429c      	cmp	r4, r3
 80010ba:	d12b      	bne.n	8001114 <__swbuf_r+0x70>
 80010bc:	686c      	ldr	r4, [r5, #4]
 80010be:	69a3      	ldr	r3, [r4, #24]
 80010c0:	60a3      	str	r3, [r4, #8]
 80010c2:	89a3      	ldrh	r3, [r4, #12]
 80010c4:	071a      	lsls	r2, r3, #28
 80010c6:	d52f      	bpl.n	8001128 <__swbuf_r+0x84>
 80010c8:	6923      	ldr	r3, [r4, #16]
 80010ca:	b36b      	cbz	r3, 8001128 <__swbuf_r+0x84>
 80010cc:	6923      	ldr	r3, [r4, #16]
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	1ac0      	subs	r0, r0, r3
 80010d2:	6963      	ldr	r3, [r4, #20]
 80010d4:	b2f6      	uxtb	r6, r6
 80010d6:	4283      	cmp	r3, r0
 80010d8:	4637      	mov	r7, r6
 80010da:	dc04      	bgt.n	80010e6 <__swbuf_r+0x42>
 80010dc:	4621      	mov	r1, r4
 80010de:	4628      	mov	r0, r5
 80010e0:	f000 f948 	bl	8001374 <_fflush_r>
 80010e4:	bb30      	cbnz	r0, 8001134 <__swbuf_r+0x90>
 80010e6:	68a3      	ldr	r3, [r4, #8]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	60a3      	str	r3, [r4, #8]
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	6022      	str	r2, [r4, #0]
 80010f2:	701e      	strb	r6, [r3, #0]
 80010f4:	6963      	ldr	r3, [r4, #20]
 80010f6:	3001      	adds	r0, #1
 80010f8:	4283      	cmp	r3, r0
 80010fa:	d004      	beq.n	8001106 <__swbuf_r+0x62>
 80010fc:	89a3      	ldrh	r3, [r4, #12]
 80010fe:	07db      	lsls	r3, r3, #31
 8001100:	d506      	bpl.n	8001110 <__swbuf_r+0x6c>
 8001102:	2e0a      	cmp	r6, #10
 8001104:	d104      	bne.n	8001110 <__swbuf_r+0x6c>
 8001106:	4621      	mov	r1, r4
 8001108:	4628      	mov	r0, r5
 800110a:	f000 f933 	bl	8001374 <_fflush_r>
 800110e:	b988      	cbnz	r0, 8001134 <__swbuf_r+0x90>
 8001110:	4638      	mov	r0, r7
 8001112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <__swbuf_r+0x9c>)
 8001116:	429c      	cmp	r4, r3
 8001118:	d101      	bne.n	800111e <__swbuf_r+0x7a>
 800111a:	68ac      	ldr	r4, [r5, #8]
 800111c:	e7cf      	b.n	80010be <__swbuf_r+0x1a>
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <__swbuf_r+0xa0>)
 8001120:	429c      	cmp	r4, r3
 8001122:	bf08      	it	eq
 8001124:	68ec      	ldreq	r4, [r5, #12]
 8001126:	e7ca      	b.n	80010be <__swbuf_r+0x1a>
 8001128:	4621      	mov	r1, r4
 800112a:	4628      	mov	r0, r5
 800112c:	f000 f81e 	bl	800116c <__swsetup_r>
 8001130:	2800      	cmp	r0, #0
 8001132:	d0cb      	beq.n	80010cc <__swbuf_r+0x28>
 8001134:	f04f 37ff 	mov.w	r7, #4294967295
 8001138:	e7ea      	b.n	8001110 <__swbuf_r+0x6c>
 800113a:	bf00      	nop
 800113c:	08001644 	.word	0x08001644
 8001140:	08001664 	.word	0x08001664
 8001144:	08001624 	.word	0x08001624

08001148 <_write_r>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4d07      	ldr	r5, [pc, #28]	; (8001168 <_write_r+0x20>)
 800114c:	4604      	mov	r4, r0
 800114e:	4608      	mov	r0, r1
 8001150:	4611      	mov	r1, r2
 8001152:	2200      	movs	r2, #0
 8001154:	602a      	str	r2, [r5, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	f7ff f921 	bl	800039e <_write>
 800115c:	1c43      	adds	r3, r0, #1
 800115e:	d102      	bne.n	8001166 <_write_r+0x1e>
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	b103      	cbz	r3, 8001166 <_write_r+0x1e>
 8001164:	6023      	str	r3, [r4, #0]
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	20000094 	.word	0x20000094

0800116c <__swsetup_r>:
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <__swsetup_r+0xcc>)
 800116e:	b570      	push	{r4, r5, r6, lr}
 8001170:	681d      	ldr	r5, [r3, #0]
 8001172:	4606      	mov	r6, r0
 8001174:	460c      	mov	r4, r1
 8001176:	b125      	cbz	r5, 8001182 <__swsetup_r+0x16>
 8001178:	69ab      	ldr	r3, [r5, #24]
 800117a:	b913      	cbnz	r3, 8001182 <__swsetup_r+0x16>
 800117c:	4628      	mov	r0, r5
 800117e:	f7ff fb1b 	bl	80007b8 <__sinit>
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <__swsetup_r+0xd0>)
 8001184:	429c      	cmp	r4, r3
 8001186:	d10f      	bne.n	80011a8 <__swsetup_r+0x3c>
 8001188:	686c      	ldr	r4, [r5, #4]
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001190:	0719      	lsls	r1, r3, #28
 8001192:	d42c      	bmi.n	80011ee <__swsetup_r+0x82>
 8001194:	06dd      	lsls	r5, r3, #27
 8001196:	d411      	bmi.n	80011bc <__swsetup_r+0x50>
 8001198:	2309      	movs	r3, #9
 800119a:	6033      	str	r3, [r6, #0]
 800119c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011a0:	81a3      	strh	r3, [r4, #12]
 80011a2:	f04f 30ff 	mov.w	r0, #4294967295
 80011a6:	e03e      	b.n	8001226 <__swsetup_r+0xba>
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <__swsetup_r+0xd4>)
 80011aa:	429c      	cmp	r4, r3
 80011ac:	d101      	bne.n	80011b2 <__swsetup_r+0x46>
 80011ae:	68ac      	ldr	r4, [r5, #8]
 80011b0:	e7eb      	b.n	800118a <__swsetup_r+0x1e>
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <__swsetup_r+0xd8>)
 80011b4:	429c      	cmp	r4, r3
 80011b6:	bf08      	it	eq
 80011b8:	68ec      	ldreq	r4, [r5, #12]
 80011ba:	e7e6      	b.n	800118a <__swsetup_r+0x1e>
 80011bc:	0758      	lsls	r0, r3, #29
 80011be:	d512      	bpl.n	80011e6 <__swsetup_r+0x7a>
 80011c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011c2:	b141      	cbz	r1, 80011d6 <__swsetup_r+0x6a>
 80011c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011c8:	4299      	cmp	r1, r3
 80011ca:	d002      	beq.n	80011d2 <__swsetup_r+0x66>
 80011cc:	4630      	mov	r0, r6
 80011ce:	f000 f991 	bl	80014f4 <_free_r>
 80011d2:	2300      	movs	r3, #0
 80011d4:	6363      	str	r3, [r4, #52]	; 0x34
 80011d6:	89a3      	ldrh	r3, [r4, #12]
 80011d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011dc:	81a3      	strh	r3, [r4, #12]
 80011de:	2300      	movs	r3, #0
 80011e0:	6063      	str	r3, [r4, #4]
 80011e2:	6923      	ldr	r3, [r4, #16]
 80011e4:	6023      	str	r3, [r4, #0]
 80011e6:	89a3      	ldrh	r3, [r4, #12]
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	81a3      	strh	r3, [r4, #12]
 80011ee:	6923      	ldr	r3, [r4, #16]
 80011f0:	b94b      	cbnz	r3, 8001206 <__swsetup_r+0x9a>
 80011f2:	89a3      	ldrh	r3, [r4, #12]
 80011f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80011f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fc:	d003      	beq.n	8001206 <__swsetup_r+0x9a>
 80011fe:	4621      	mov	r1, r4
 8001200:	4630      	mov	r0, r6
 8001202:	f000 f92b 	bl	800145c <__smakebuf_r>
 8001206:	89a0      	ldrh	r0, [r4, #12]
 8001208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800120c:	f010 0301 	ands.w	r3, r0, #1
 8001210:	d00a      	beq.n	8001228 <__swsetup_r+0xbc>
 8001212:	2300      	movs	r3, #0
 8001214:	60a3      	str	r3, [r4, #8]
 8001216:	6963      	ldr	r3, [r4, #20]
 8001218:	425b      	negs	r3, r3
 800121a:	61a3      	str	r3, [r4, #24]
 800121c:	6923      	ldr	r3, [r4, #16]
 800121e:	b943      	cbnz	r3, 8001232 <__swsetup_r+0xc6>
 8001220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001224:	d1ba      	bne.n	800119c <__swsetup_r+0x30>
 8001226:	bd70      	pop	{r4, r5, r6, pc}
 8001228:	0781      	lsls	r1, r0, #30
 800122a:	bf58      	it	pl
 800122c:	6963      	ldrpl	r3, [r4, #20]
 800122e:	60a3      	str	r3, [r4, #8]
 8001230:	e7f4      	b.n	800121c <__swsetup_r+0xb0>
 8001232:	2000      	movs	r0, #0
 8001234:	e7f7      	b.n	8001226 <__swsetup_r+0xba>
 8001236:	bf00      	nop
 8001238:	20000000 	.word	0x20000000
 800123c:	08001644 	.word	0x08001644
 8001240:	08001664 	.word	0x08001664
 8001244:	08001624 	.word	0x08001624

08001248 <_close_r>:
 8001248:	b538      	push	{r3, r4, r5, lr}
 800124a:	4d06      	ldr	r5, [pc, #24]	; (8001264 <_close_r+0x1c>)
 800124c:	2300      	movs	r3, #0
 800124e:	4604      	mov	r4, r0
 8001250:	4608      	mov	r0, r1
 8001252:	602b      	str	r3, [r5, #0]
 8001254:	f7ff f8bf 	bl	80003d6 <_close>
 8001258:	1c43      	adds	r3, r0, #1
 800125a:	d102      	bne.n	8001262 <_close_r+0x1a>
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	b103      	cbz	r3, 8001262 <_close_r+0x1a>
 8001260:	6023      	str	r3, [r4, #0]
 8001262:	bd38      	pop	{r3, r4, r5, pc}
 8001264:	20000094 	.word	0x20000094

08001268 <__sflush_r>:
 8001268:	898a      	ldrh	r2, [r1, #12]
 800126a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126e:	4605      	mov	r5, r0
 8001270:	0710      	lsls	r0, r2, #28
 8001272:	460c      	mov	r4, r1
 8001274:	d458      	bmi.n	8001328 <__sflush_r+0xc0>
 8001276:	684b      	ldr	r3, [r1, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dc05      	bgt.n	8001288 <__sflush_r+0x20>
 800127c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	dc02      	bgt.n	8001288 <__sflush_r+0x20>
 8001282:	2000      	movs	r0, #0
 8001284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800128a:	2e00      	cmp	r6, #0
 800128c:	d0f9      	beq.n	8001282 <__sflush_r+0x1a>
 800128e:	2300      	movs	r3, #0
 8001290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001294:	682f      	ldr	r7, [r5, #0]
 8001296:	602b      	str	r3, [r5, #0]
 8001298:	d032      	beq.n	8001300 <__sflush_r+0x98>
 800129a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800129c:	89a3      	ldrh	r3, [r4, #12]
 800129e:	075a      	lsls	r2, r3, #29
 80012a0:	d505      	bpl.n	80012ae <__sflush_r+0x46>
 80012a2:	6863      	ldr	r3, [r4, #4]
 80012a4:	1ac0      	subs	r0, r0, r3
 80012a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012a8:	b10b      	cbz	r3, 80012ae <__sflush_r+0x46>
 80012aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ac:	1ac0      	subs	r0, r0, r3
 80012ae:	2300      	movs	r3, #0
 80012b0:	4602      	mov	r2, r0
 80012b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012b4:	6a21      	ldr	r1, [r4, #32]
 80012b6:	4628      	mov	r0, r5
 80012b8:	47b0      	blx	r6
 80012ba:	1c43      	adds	r3, r0, #1
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	d106      	bne.n	80012ce <__sflush_r+0x66>
 80012c0:	6829      	ldr	r1, [r5, #0]
 80012c2:	291d      	cmp	r1, #29
 80012c4:	d82c      	bhi.n	8001320 <__sflush_r+0xb8>
 80012c6:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <__sflush_r+0x108>)
 80012c8:	40ca      	lsrs	r2, r1
 80012ca:	07d6      	lsls	r6, r2, #31
 80012cc:	d528      	bpl.n	8001320 <__sflush_r+0xb8>
 80012ce:	2200      	movs	r2, #0
 80012d0:	6062      	str	r2, [r4, #4]
 80012d2:	04d9      	lsls	r1, r3, #19
 80012d4:	6922      	ldr	r2, [r4, #16]
 80012d6:	6022      	str	r2, [r4, #0]
 80012d8:	d504      	bpl.n	80012e4 <__sflush_r+0x7c>
 80012da:	1c42      	adds	r2, r0, #1
 80012dc:	d101      	bne.n	80012e2 <__sflush_r+0x7a>
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	b903      	cbnz	r3, 80012e4 <__sflush_r+0x7c>
 80012e2:	6560      	str	r0, [r4, #84]	; 0x54
 80012e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012e6:	602f      	str	r7, [r5, #0]
 80012e8:	2900      	cmp	r1, #0
 80012ea:	d0ca      	beq.n	8001282 <__sflush_r+0x1a>
 80012ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012f0:	4299      	cmp	r1, r3
 80012f2:	d002      	beq.n	80012fa <__sflush_r+0x92>
 80012f4:	4628      	mov	r0, r5
 80012f6:	f000 f8fd 	bl	80014f4 <_free_r>
 80012fa:	2000      	movs	r0, #0
 80012fc:	6360      	str	r0, [r4, #52]	; 0x34
 80012fe:	e7c1      	b.n	8001284 <__sflush_r+0x1c>
 8001300:	6a21      	ldr	r1, [r4, #32]
 8001302:	2301      	movs	r3, #1
 8001304:	4628      	mov	r0, r5
 8001306:	47b0      	blx	r6
 8001308:	1c41      	adds	r1, r0, #1
 800130a:	d1c7      	bne.n	800129c <__sflush_r+0x34>
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0c4      	beq.n	800129c <__sflush_r+0x34>
 8001312:	2b1d      	cmp	r3, #29
 8001314:	d001      	beq.n	800131a <__sflush_r+0xb2>
 8001316:	2b16      	cmp	r3, #22
 8001318:	d101      	bne.n	800131e <__sflush_r+0xb6>
 800131a:	602f      	str	r7, [r5, #0]
 800131c:	e7b1      	b.n	8001282 <__sflush_r+0x1a>
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	e7ad      	b.n	8001284 <__sflush_r+0x1c>
 8001328:	690f      	ldr	r7, [r1, #16]
 800132a:	2f00      	cmp	r7, #0
 800132c:	d0a9      	beq.n	8001282 <__sflush_r+0x1a>
 800132e:	0793      	lsls	r3, r2, #30
 8001330:	680e      	ldr	r6, [r1, #0]
 8001332:	bf08      	it	eq
 8001334:	694b      	ldreq	r3, [r1, #20]
 8001336:	600f      	str	r7, [r1, #0]
 8001338:	bf18      	it	ne
 800133a:	2300      	movne	r3, #0
 800133c:	eba6 0807 	sub.w	r8, r6, r7
 8001340:	608b      	str	r3, [r1, #8]
 8001342:	f1b8 0f00 	cmp.w	r8, #0
 8001346:	dd9c      	ble.n	8001282 <__sflush_r+0x1a>
 8001348:	6a21      	ldr	r1, [r4, #32]
 800134a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800134c:	4643      	mov	r3, r8
 800134e:	463a      	mov	r2, r7
 8001350:	4628      	mov	r0, r5
 8001352:	47b0      	blx	r6
 8001354:	2800      	cmp	r0, #0
 8001356:	dc06      	bgt.n	8001366 <__sflush_r+0xfe>
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135e:	81a3      	strh	r3, [r4, #12]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	e78e      	b.n	8001284 <__sflush_r+0x1c>
 8001366:	4407      	add	r7, r0
 8001368:	eba8 0800 	sub.w	r8, r8, r0
 800136c:	e7e9      	b.n	8001342 <__sflush_r+0xda>
 800136e:	bf00      	nop
 8001370:	20400001 	.word	0x20400001

08001374 <_fflush_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	690b      	ldr	r3, [r1, #16]
 8001378:	4605      	mov	r5, r0
 800137a:	460c      	mov	r4, r1
 800137c:	b913      	cbnz	r3, 8001384 <_fflush_r+0x10>
 800137e:	2500      	movs	r5, #0
 8001380:	4628      	mov	r0, r5
 8001382:	bd38      	pop	{r3, r4, r5, pc}
 8001384:	b118      	cbz	r0, 800138e <_fflush_r+0x1a>
 8001386:	6983      	ldr	r3, [r0, #24]
 8001388:	b90b      	cbnz	r3, 800138e <_fflush_r+0x1a>
 800138a:	f7ff fa15 	bl	80007b8 <__sinit>
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <_fflush_r+0x6c>)
 8001390:	429c      	cmp	r4, r3
 8001392:	d11b      	bne.n	80013cc <_fflush_r+0x58>
 8001394:	686c      	ldr	r4, [r5, #4]
 8001396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0ef      	beq.n	800137e <_fflush_r+0xa>
 800139e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013a0:	07d0      	lsls	r0, r2, #31
 80013a2:	d404      	bmi.n	80013ae <_fflush_r+0x3a>
 80013a4:	0599      	lsls	r1, r3, #22
 80013a6:	d402      	bmi.n	80013ae <_fflush_r+0x3a>
 80013a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013aa:	f7ff faa3 	bl	80008f4 <__retarget_lock_acquire_recursive>
 80013ae:	4628      	mov	r0, r5
 80013b0:	4621      	mov	r1, r4
 80013b2:	f7ff ff59 	bl	8001268 <__sflush_r>
 80013b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013b8:	07da      	lsls	r2, r3, #31
 80013ba:	4605      	mov	r5, r0
 80013bc:	d4e0      	bmi.n	8001380 <_fflush_r+0xc>
 80013be:	89a3      	ldrh	r3, [r4, #12]
 80013c0:	059b      	lsls	r3, r3, #22
 80013c2:	d4dd      	bmi.n	8001380 <_fflush_r+0xc>
 80013c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013c6:	f7ff fa96 	bl	80008f6 <__retarget_lock_release_recursive>
 80013ca:	e7d9      	b.n	8001380 <_fflush_r+0xc>
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <_fflush_r+0x70>)
 80013ce:	429c      	cmp	r4, r3
 80013d0:	d101      	bne.n	80013d6 <_fflush_r+0x62>
 80013d2:	68ac      	ldr	r4, [r5, #8]
 80013d4:	e7df      	b.n	8001396 <_fflush_r+0x22>
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <_fflush_r+0x74>)
 80013d8:	429c      	cmp	r4, r3
 80013da:	bf08      	it	eq
 80013dc:	68ec      	ldreq	r4, [r5, #12]
 80013de:	e7da      	b.n	8001396 <_fflush_r+0x22>
 80013e0:	08001644 	.word	0x08001644
 80013e4:	08001664 	.word	0x08001664
 80013e8:	08001624 	.word	0x08001624

080013ec <_lseek_r>:
 80013ec:	b538      	push	{r3, r4, r5, lr}
 80013ee:	4d07      	ldr	r5, [pc, #28]	; (800140c <_lseek_r+0x20>)
 80013f0:	4604      	mov	r4, r0
 80013f2:	4608      	mov	r0, r1
 80013f4:	4611      	mov	r1, r2
 80013f6:	2200      	movs	r2, #0
 80013f8:	602a      	str	r2, [r5, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	f7ff f812 	bl	8000424 <_lseek>
 8001400:	1c43      	adds	r3, r0, #1
 8001402:	d102      	bne.n	800140a <_lseek_r+0x1e>
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	b103      	cbz	r3, 800140a <_lseek_r+0x1e>
 8001408:	6023      	str	r3, [r4, #0]
 800140a:	bd38      	pop	{r3, r4, r5, pc}
 800140c:	20000094 	.word	0x20000094

08001410 <__swhatbuf_r>:
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	460e      	mov	r6, r1
 8001414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001418:	2900      	cmp	r1, #0
 800141a:	b096      	sub	sp, #88	; 0x58
 800141c:	4614      	mov	r4, r2
 800141e:	461d      	mov	r5, r3
 8001420:	da08      	bge.n	8001434 <__swhatbuf_r+0x24>
 8001422:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	602a      	str	r2, [r5, #0]
 800142a:	061a      	lsls	r2, r3, #24
 800142c:	d410      	bmi.n	8001450 <__swhatbuf_r+0x40>
 800142e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001432:	e00e      	b.n	8001452 <__swhatbuf_r+0x42>
 8001434:	466a      	mov	r2, sp
 8001436:	f000 f8bb 	bl	80015b0 <_fstat_r>
 800143a:	2800      	cmp	r0, #0
 800143c:	dbf1      	blt.n	8001422 <__swhatbuf_r+0x12>
 800143e:	9a01      	ldr	r2, [sp, #4]
 8001440:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001444:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001448:	425a      	negs	r2, r3
 800144a:	415a      	adcs	r2, r3
 800144c:	602a      	str	r2, [r5, #0]
 800144e:	e7ee      	b.n	800142e <__swhatbuf_r+0x1e>
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	2000      	movs	r0, #0
 8001454:	6023      	str	r3, [r4, #0]
 8001456:	b016      	add	sp, #88	; 0x58
 8001458:	bd70      	pop	{r4, r5, r6, pc}
	...

0800145c <__smakebuf_r>:
 800145c:	898b      	ldrh	r3, [r1, #12]
 800145e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001460:	079d      	lsls	r5, r3, #30
 8001462:	4606      	mov	r6, r0
 8001464:	460c      	mov	r4, r1
 8001466:	d507      	bpl.n	8001478 <__smakebuf_r+0x1c>
 8001468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800146c:	6023      	str	r3, [r4, #0]
 800146e:	6123      	str	r3, [r4, #16]
 8001470:	2301      	movs	r3, #1
 8001472:	6163      	str	r3, [r4, #20]
 8001474:	b002      	add	sp, #8
 8001476:	bd70      	pop	{r4, r5, r6, pc}
 8001478:	ab01      	add	r3, sp, #4
 800147a:	466a      	mov	r2, sp
 800147c:	f7ff ffc8 	bl	8001410 <__swhatbuf_r>
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	4605      	mov	r5, r0
 8001484:	4630      	mov	r0, r6
 8001486:	f7ff fa57 	bl	8000938 <_malloc_r>
 800148a:	b948      	cbnz	r0, 80014a0 <__smakebuf_r+0x44>
 800148c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001490:	059a      	lsls	r2, r3, #22
 8001492:	d4ef      	bmi.n	8001474 <__smakebuf_r+0x18>
 8001494:	f023 0303 	bic.w	r3, r3, #3
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	81a3      	strh	r3, [r4, #12]
 800149e:	e7e3      	b.n	8001468 <__smakebuf_r+0xc>
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <__smakebuf_r+0x7c>)
 80014a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80014a4:	89a3      	ldrh	r3, [r4, #12]
 80014a6:	6020      	str	r0, [r4, #0]
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	81a3      	strh	r3, [r4, #12]
 80014ae:	9b00      	ldr	r3, [sp, #0]
 80014b0:	6163      	str	r3, [r4, #20]
 80014b2:	9b01      	ldr	r3, [sp, #4]
 80014b4:	6120      	str	r0, [r4, #16]
 80014b6:	b15b      	cbz	r3, 80014d0 <__smakebuf_r+0x74>
 80014b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014bc:	4630      	mov	r0, r6
 80014be:	f000 f889 	bl	80015d4 <_isatty_r>
 80014c2:	b128      	cbz	r0, 80014d0 <__smakebuf_r+0x74>
 80014c4:	89a3      	ldrh	r3, [r4, #12]
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	81a3      	strh	r3, [r4, #12]
 80014d0:	89a0      	ldrh	r0, [r4, #12]
 80014d2:	4305      	orrs	r5, r0
 80014d4:	81a5      	strh	r5, [r4, #12]
 80014d6:	e7cd      	b.n	8001474 <__smakebuf_r+0x18>
 80014d8:	08000751 	.word	0x08000751

080014dc <__malloc_lock>:
 80014dc:	4801      	ldr	r0, [pc, #4]	; (80014e4 <__malloc_lock+0x8>)
 80014de:	f7ff ba09 	b.w	80008f4 <__retarget_lock_acquire_recursive>
 80014e2:	bf00      	nop
 80014e4:	20000088 	.word	0x20000088

080014e8 <__malloc_unlock>:
 80014e8:	4801      	ldr	r0, [pc, #4]	; (80014f0 <__malloc_unlock+0x8>)
 80014ea:	f7ff ba04 	b.w	80008f6 <__retarget_lock_release_recursive>
 80014ee:	bf00      	nop
 80014f0:	20000088 	.word	0x20000088

080014f4 <_free_r>:
 80014f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014f6:	2900      	cmp	r1, #0
 80014f8:	d044      	beq.n	8001584 <_free_r+0x90>
 80014fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014fe:	9001      	str	r0, [sp, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f1a1 0404 	sub.w	r4, r1, #4
 8001506:	bfb8      	it	lt
 8001508:	18e4      	addlt	r4, r4, r3
 800150a:	f7ff ffe7 	bl	80014dc <__malloc_lock>
 800150e:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <_free_r+0x94>)
 8001510:	9801      	ldr	r0, [sp, #4]
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	b933      	cbnz	r3, 8001524 <_free_r+0x30>
 8001516:	6063      	str	r3, [r4, #4]
 8001518:	6014      	str	r4, [r2, #0]
 800151a:	b003      	add	sp, #12
 800151c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001520:	f7ff bfe2 	b.w	80014e8 <__malloc_unlock>
 8001524:	42a3      	cmp	r3, r4
 8001526:	d908      	bls.n	800153a <_free_r+0x46>
 8001528:	6825      	ldr	r5, [r4, #0]
 800152a:	1961      	adds	r1, r4, r5
 800152c:	428b      	cmp	r3, r1
 800152e:	bf01      	itttt	eq
 8001530:	6819      	ldreq	r1, [r3, #0]
 8001532:	685b      	ldreq	r3, [r3, #4]
 8001534:	1949      	addeq	r1, r1, r5
 8001536:	6021      	streq	r1, [r4, #0]
 8001538:	e7ed      	b.n	8001516 <_free_r+0x22>
 800153a:	461a      	mov	r2, r3
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	b10b      	cbz	r3, 8001544 <_free_r+0x50>
 8001540:	42a3      	cmp	r3, r4
 8001542:	d9fa      	bls.n	800153a <_free_r+0x46>
 8001544:	6811      	ldr	r1, [r2, #0]
 8001546:	1855      	adds	r5, r2, r1
 8001548:	42a5      	cmp	r5, r4
 800154a:	d10b      	bne.n	8001564 <_free_r+0x70>
 800154c:	6824      	ldr	r4, [r4, #0]
 800154e:	4421      	add	r1, r4
 8001550:	1854      	adds	r4, r2, r1
 8001552:	42a3      	cmp	r3, r4
 8001554:	6011      	str	r1, [r2, #0]
 8001556:	d1e0      	bne.n	800151a <_free_r+0x26>
 8001558:	681c      	ldr	r4, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	6053      	str	r3, [r2, #4]
 800155e:	4421      	add	r1, r4
 8001560:	6011      	str	r1, [r2, #0]
 8001562:	e7da      	b.n	800151a <_free_r+0x26>
 8001564:	d902      	bls.n	800156c <_free_r+0x78>
 8001566:	230c      	movs	r3, #12
 8001568:	6003      	str	r3, [r0, #0]
 800156a:	e7d6      	b.n	800151a <_free_r+0x26>
 800156c:	6825      	ldr	r5, [r4, #0]
 800156e:	1961      	adds	r1, r4, r5
 8001570:	428b      	cmp	r3, r1
 8001572:	bf04      	itt	eq
 8001574:	6819      	ldreq	r1, [r3, #0]
 8001576:	685b      	ldreq	r3, [r3, #4]
 8001578:	6063      	str	r3, [r4, #4]
 800157a:	bf04      	itt	eq
 800157c:	1949      	addeq	r1, r1, r5
 800157e:	6021      	streq	r1, [r4, #0]
 8001580:	6054      	str	r4, [r2, #4]
 8001582:	e7ca      	b.n	800151a <_free_r+0x26>
 8001584:	b003      	add	sp, #12
 8001586:	bd30      	pop	{r4, r5, pc}
 8001588:	2000008c 	.word	0x2000008c

0800158c <_read_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4d07      	ldr	r5, [pc, #28]	; (80015ac <_read_r+0x20>)
 8001590:	4604      	mov	r4, r0
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	2200      	movs	r2, #0
 8001598:	602a      	str	r2, [r5, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	f7fe fee2 	bl	8000364 <_read>
 80015a0:	1c43      	adds	r3, r0, #1
 80015a2:	d102      	bne.n	80015aa <_read_r+0x1e>
 80015a4:	682b      	ldr	r3, [r5, #0]
 80015a6:	b103      	cbz	r3, 80015aa <_read_r+0x1e>
 80015a8:	6023      	str	r3, [r4, #0]
 80015aa:	bd38      	pop	{r3, r4, r5, pc}
 80015ac:	20000094 	.word	0x20000094

080015b0 <_fstat_r>:
 80015b0:	b538      	push	{r3, r4, r5, lr}
 80015b2:	4d07      	ldr	r5, [pc, #28]	; (80015d0 <_fstat_r+0x20>)
 80015b4:	2300      	movs	r3, #0
 80015b6:	4604      	mov	r4, r0
 80015b8:	4608      	mov	r0, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	602b      	str	r3, [r5, #0]
 80015be:	f7fe ff16 	bl	80003ee <_fstat>
 80015c2:	1c43      	adds	r3, r0, #1
 80015c4:	d102      	bne.n	80015cc <_fstat_r+0x1c>
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	b103      	cbz	r3, 80015cc <_fstat_r+0x1c>
 80015ca:	6023      	str	r3, [r4, #0]
 80015cc:	bd38      	pop	{r3, r4, r5, pc}
 80015ce:	bf00      	nop
 80015d0:	20000094 	.word	0x20000094

080015d4 <_isatty_r>:
 80015d4:	b538      	push	{r3, r4, r5, lr}
 80015d6:	4d06      	ldr	r5, [pc, #24]	; (80015f0 <_isatty_r+0x1c>)
 80015d8:	2300      	movs	r3, #0
 80015da:	4604      	mov	r4, r0
 80015dc:	4608      	mov	r0, r1
 80015de:	602b      	str	r3, [r5, #0]
 80015e0:	f7fe ff15 	bl	800040e <_isatty>
 80015e4:	1c43      	adds	r3, r0, #1
 80015e6:	d102      	bne.n	80015ee <_isatty_r+0x1a>
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	b103      	cbz	r3, 80015ee <_isatty_r+0x1a>
 80015ec:	6023      	str	r3, [r4, #0]
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
 80015f0:	20000094 	.word	0x20000094

080015f4 <_init>:
 80015f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f6:	bf00      	nop
 80015f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fa:	bc08      	pop	{r3}
 80015fc:	469e      	mov	lr, r3
 80015fe:	4770      	bx	lr

08001600 <_fini>:
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	bf00      	nop
 8001604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001606:	bc08      	pop	{r3}
 8001608:	469e      	mov	lr, r3
 800160a:	4770      	bx	lr
